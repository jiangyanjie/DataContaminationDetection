/*
 * ICSMDisplay.java
 *
 * Created on March 19, 2010, 10:37 AM
 */

package falcon;

import java.io.*;

/**
 *
 * @author  WA0003EN
 */
public class CRSMDisplay extends java.awt.Frame {
    
    protected FusionART CRSM;
    protected EpisodicModelcc episodic;
    
    protected String allWeapons [] = new String [] {"FLAK_CANNON", "MINIGUN",
            "ROCKET_LAUNCHER", "LINK_GUN", "BIO_RIFLE", "LIGHTNING_GUN",
            "SHOCK_RIFLE", "SNIPER_RIFLE", "ASSAULT_RIFLE", "SHIELD_GUN"};
    protected String allItem [] =new String[]{"Medical Kit (Small)", "Medical Kit (Large)", 
            allWeapons[0], allWeapons[1], allWeapons[2], allWeapons[3], allWeapons[4], 
            allWeapons[5], allWeapons[6], allWeapons[7], allWeapons[8], allWeapons[9], };

    /** Creates new form ICSMDisplay */
    public CRSMDisplay() {
        initComponents();
        setVisible(true);
        
        System.out.println("CRSM display initate");
    }
    
    public void setCRSM(FusionART crsm, EpisodicModelcc ep){
        System.out.println("CRSM display set");
        
        CRSM=crsm;
        episodic=ep;
        
        for(int i=0;i<crsm.numCode;i++){
            this.jComboBox1.addItem(new String(""+i));
        }    
        
        for(int i=0;i<crsm.len[0]/2;i++){
            this.jComboBox2.addItem(new String(""+i));
            this.jComboBox3.addItem(new String(""+i));
        }
        
        this.printCodes();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Bodoni MT", 3, 24));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EVENTS ONLINE DISPlAY");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Bodoni MT", 0, 14));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("View A Code");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Bodoni MT", 0, 18));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Results");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Bodoni MT", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(0, 102, 153));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Bodoni MT", 0, 14));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Search for Previous Situation");

        jComboBox1.setFont(new java.awt.Font("Bodoni MT", 0, 12));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a code index to view" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setFont(new java.awt.Font("Bodoni MT", 0, 12));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select the situation index" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2actionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Bodoni MT", 0, 14));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Search for Next Situation");

        jComboBox3.setFont(new java.awt.Font("Bodoni MT", 0, 12)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select the situation index" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3actionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(307, 307, 307))
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 161, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
// TODO add your handling code here:
     if (this.jComboBox1.getSelectedIndex() == 0) {
        return;
    }
     
    double[][] pPattern, nPattern;
    String str="";

    int ptr = this.jComboBox1.getSelectedIndex() - 1;
    
   /* int k;
    nPattern=new double[CRSM.numSpace/2][];
    for(k=0;k<this.CRSM.numSpace/2;k++){
         //nPattern[k]=new double[CRSM.len[k]];
         nPattern[k]=this.CRSM.weight[ptr][k];  
    }
    
    pPattern=new double[CRSM.numSpace/2][];
    for(;k<this.CRSM.numSpace;k++){
        pPattern[k-this.CRSM.numSpace/2]=this.CRSM.weight[ptr][k];
    }*/
    
    nPattern=new double[4][];
    System.out.println(episodic.eventLearner.len[0]);
    for(int k=0;k<4;k++){
         nPattern[k]=new double[episodic.eventLearner.len[k]];
         //nPattern[k]=this.CRSM.weight[ptr][k];  
    }
    
    System.out.println(CRSM.weight[ptr][0]+"\t"+nPattern[0]+"\t"+episodic.eventLearner.len[0]);
    System.arraycopy(CRSM.weight[ptr][0], 0, nPattern[0], 0, episodic.eventLearner.len[0]);
    System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0], nPattern[1], 0, episodic.eventLearner.len[1]);
    System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0]+episodic.eventLearner.len[1], nPattern[2], 0, episodic.eventLearner.len[2]);
    System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0]+episodic.eventLearner.len[1]+episodic.eventLearner.len[2], nPattern[3], 0, episodic.eventLearner.len[3]);
    
    pPattern=new double[4][];
    for(int k=0;k<4;k++){
         pPattern[k]=new double[episodic.eventLearner.len[k]];
         //nPattern[k]=this.CRSM.weight[ptr][k];  
    }
    System.arraycopy(CRSM.weight[ptr][1], 0, pPattern[0], 0, episodic.eventLearner.len[0]);
    System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0], pPattern[1], 0, episodic.eventLearner.len[1]);
    System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0]+episodic.eventLearner.len[1], pPattern[2], 0, episodic.eventLearner.len[2]);
    System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0]+episodic.eventLearner.len[1]+episodic.eventLearner.len[2], pPattern[3], 0, episodic.eventLearner.len[3]);
    
    EventPattern pEvent=EventPattern.getEventPattern(pPattern);
    EventPattern nEvent=EventPattern.getEventPattern(nPattern);
    
    str+="***************************\n";
    str+="*IF a death situation is :*\n";
    str+="***************************\n";
    
    str+=nEvent.toStringDispt();
    
    str+="**************************************\n";
    str+="*THEN the siuation leading to it is :*\n";
    str+="**************************************\n";
    
    str+=pEvent.toStringDispt();
    this.jTextArea1.setText(str);
}//GEN-LAST:event_jComboBox1ActionPerformed

private void printCodes(){
    // if (this.jComboBox1.getSelectedIndex() == 0) {
    //    return;
    //
    System.out.println("length="+(this.jComboBox1.getItemCount()-2));
    String str=(this.jComboBox1.getItemCount()-2)+"\n";
    
    for(int ptr=0;ptr<this.jComboBox1.getItemCount()-2;ptr++){
        double[][] pPattern, nPattern; 
    
        nPattern=new double[4][];
        //System.out.println(episodic.eventLearner.len[0]);
        for(int k=0;k<4;k++){
            nPattern[k]=new double[episodic.eventLearner.len[k]];
         //nPattern[k]=this.CRSM.weight[ptr][k];  
        }
    
        //System.out.println(CRSM.weight[ptr][0]+"\t"+nPattern[0]+"\t"+episodic.eventLearner.len[0]);
        System.arraycopy(CRSM.weight[ptr][0], 0, nPattern[0], 0, episodic.eventLearner.len[0]);
        System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0], nPattern[1], 0, episodic.eventLearner.len[1]);
        System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0]+episodic.eventLearner.len[1], nPattern[2], 0, episodic.eventLearner.len[2]);
        System.arraycopy(CRSM.weight[ptr][0], episodic.eventLearner.len[0]+episodic.eventLearner.len[1]+episodic.eventLearner.len[2], nPattern[3], 0, episodic.eventLearner.len[3]);
    
        pPattern=new double[4][];
        for(int k=0;k<4;k++){
            pPattern[k]=new double[episodic.eventLearner.len[k]];
            //nPattern[k]=this.CRSM.weight[ptr][k];  
        } 
        System.arraycopy(CRSM.weight[ptr][1], 0, pPattern[0], 0, episodic.eventLearner.len[0]);
        System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0], pPattern[1], 0, episodic.eventLearner.len[1]);
        System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0]+episodic.eventLearner.len[1], pPattern[2], 0, episodic.eventLearner.len[2]);
        System.arraycopy(CRSM.weight[ptr][1], episodic.eventLearner.len[0]+episodic.eventLearner.len[1]+episodic.eventLearner.len[2], pPattern[3], 0, episodic.eventLearner.len[3]);
    
        EventPattern pEvent=EventPattern.getEventPattern(pPattern);
        EventPattern nEvent=EventPattern.getEventPattern(nPattern);
        
        str+="***************************\n";
        str+="*IF a current situation is :*\n";
        str+="***************************\n";
    
        str+=pEvent.toStringDispt();
    
        str+="***********************************\n";
        str+="*THEN the siuation next to it is :*\n";
        str+="***********************************\n";
    
        str+=nEvent.toStringDispt()+"\n\n";
        this.jTextArea1.setText(str);
    }
    
    try {
               FileWriter fw1 = new FileWriter("/Users/atifsaleem/NetBeansProjects/Falcon_14_05_10_atif/data");
               fw1.write(str+"\n");
               fw1.close();
            }
         catch (Exception e){
    	       e.printStackTrace();
         }
}

private void jComboBox2actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2actionPerformed
// TODO add your handling code here:
    if (this.jComboBox2.getSelectedIndex() == 0) {
        return;
    }

    int ptr = this.jComboBox2.getSelectedIndex() - 1;
    String str = "The select event --- "+ "code index = "+ptr+"\n"+this.getCodeDispt(ptr);
    
    double[] tempGamma=new double[this.CRSM.gamma.length];
    System.arraycopy(this.CRSM.gamma, 0, tempGamma, 0, this.CRSM.gamma.length);
    CRSM.gamma=new double[]{(double) 0, (double)1};
    
    double[][] inPattern=new double[this.CRSM.numSpace][];
    for (int k=0;k<CRSM.numSpace;k++) {
         inPattern[k] = new double [CRSM.len[k]];
    }
    System.arraycopy(resetStatus(inPattern[0]), 0, inPattern[0], 0, inPattern[0].length);            
    System.arraycopy(resetStatus(inPattern[1]), 0, inPattern[1], 0, inPattern[1].length);
    inPattern[1][ptr*2]=1;
    inPattern[1][ptr*2+1]=0;
    
    System.out.println("Test for previuos event patter in:");
    String test_str="IF current siuation is : ";
    int[] preCode=this.getEventIdx(inPattern[0]);
    int[] curCode=this.getEventIdx(inPattern[1]);
    
    for(int i=0;i<curCode.length;i++){
        test_str+=curCode[i]+"\t";
    }
    test_str+="THEN previous siuation is : ";
    for(int i=0;i<preCode.length;i++){
        test_str+=preCode[i]+"\t";
    }
    
    System.out.println(test_str);
    
    int[] winners = this.CRSM.findWinnerK(inPattern, CRSM.FUZZYART,0,0.99);
    
    str+="**************************\n";
    str+="*Previous event generated*\n";
    str+="**************************\n";
    
    if(winners==null){
        System.out.println("Unsuccessful retrieve!!!!");
        this.jTextArea1.setText(str+"N.A.");
        return;
    }
    
    for(int i=0;i<winners.length;i++){
        if(winners[winners.length-1]==this.CRSM.numCode-1){
            System.out.println("enters!!");
            int[] rewinners=new int[winners.length-1];
            System.arraycopy(winners, 0, rewinners, 0, rewinners.length);
            winners=new int[winners.length-1];
            winners=rewinners;
        }
        else{
            System.out.println("winner @ code "+winners[i]+": pattern consistent? "+this.isSamePattern(inPattern[1], CRSM.weight[winners[i]][1]));
            winners[i]=this.getEventIdx(CRSM.weight[winners[i]][0])[0];
        }
    }
    
    for(int i=0;i<winners.length;i++){
        if(winners[i]<this.episodic.eventLearner.numCode){
            str +=i+ ". "+ "code index = "+winners[i]+"\n"+this.getCodeDispt(winners[i])+"\n";
        }
    }
    
    this.jTextArea1.setText(str);
    System.arraycopy(tempGamma, 0, this.CRSM.gamma, 0, this.CRSM.gamma.length);
}//GEN-LAST:event_jComboBox2actionPerformed

private void jComboBox3actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3actionPerformed
// TODO add your handling code here:
    if (this.jComboBox3.getSelectedIndex() == 0) {
        return;
    }

    int ptr = this.jComboBox3.getSelectedIndex() - 1;
    String str = "The select event --- "+ "code index = "+ptr+"\n"+this.getCodeDispt(ptr);
    
    double[] tempGamma=new double[this.CRSM.gamma.length];
    System.arraycopy(this.CRSM.gamma, 0, tempGamma, 0, this.CRSM.gamma.length);
    CRSM.gamma=new double[]{(double) 1, (double)0};
    
    double[][] inPattern=new double[this.CRSM.numSpace][];
    for (int k=0;k<CRSM.numSpace;k++) {
         inPattern[k] = new double [CRSM.len[k]];
    }
    System.arraycopy(resetStatus(inPattern[0]), 0, inPattern[0], 0, inPattern[0].length);            
    System.arraycopy(resetStatus(inPattern[1]), 0, inPattern[1], 0, inPattern[1].length);
    inPattern[0][ptr*2]=1;
    inPattern[0][ptr*2+1]=0;
    
    System.out.println("Test for previuos event patter in:");
    String test_str="IF current siuation is : ";
    int[] preCode=this.getEventIdx(inPattern[0]);
    int[] curCode=this.getEventIdx(inPattern[1]);
    
    for(int i=0;i<curCode.length;i++){
        test_str+=curCode[i]+"\t";
    }
    test_str+="THEN previous siuation is : ";
    for(int i=0;i<preCode.length;i++){
        test_str+=preCode[i]+"\t";
    }
    
    System.out.println(test_str);
    
    int[] winners = this.CRSM.findWinnerK(inPattern, CRSM.FUZZYART,1,0.99);
    
    str+="**********************\n";
    str+="*Next event generated*\n";
    str+="**********************\n";
    
    if(winners==null){
        System.out.println("Unsuccessful retrieve!!!!");
        this.jTextArea1.setText(str+"N.A.");
        return;
    }
    
    for(int i=0;i<winners.length;i++){
        if(winners[winners.length-1]==this.CRSM.numCode-1){
            System.out.println("enters!!");
            int[] rewinners=new int[winners.length-1];
            System.arraycopy(winners, 0, rewinners, 0, rewinners.length);
            winners=new int[winners.length-1];
            winners=rewinners;
        }
        else{
            System.out.println("winner @ code "+winners[i]+": pattern consistent? "+this.isSamePattern(inPattern[0], CRSM.weight[winners[i]][0]));
            winners[i]=this.getEventIdx(CRSM.weight[winners[i]][1])[0];
        }
    }
    
    for(int i=0;i<winners.length;i++){
        if(winners[i]<this.episodic.eventLearner.numCode){
            str +=i+ ". "+ "code index = "+winners[i]+"\n"+this.getCodeDispt(winners[i])+"\n";
        }
    }
    
    this.jTextArea1.setText(str);
    System.arraycopy(tempGamma, 0, this.CRSM.gamma, 0, this.CRSM.gamma.length);
}//GEN-LAST:event_jComboBox3actionPerformed

 private double[] resetStatus(double[] arr){
        for(int j=0;j<arr.length;j++){
            if(j%2==0){
                arr[j]=0;
            }
            else{
                arr[j]=1;
            }
        }
        
        return arr;
    }

private String getCodeDispt(int codeIndex){
    String str="Code No "+codeIndex+":\n";    
    double[][] codeArr=this.episodic.eventLearner.weight[codeIndex];
    
    Event e=Event.getEvent(codeArr);
    
    return e.toStringDispt();
}

private int[] getEventIdx(double[] codeArr){
    java.util.Vector<Integer> codes=new java.util.Vector<Integer>(0);
    
    for(int i=0;i<codeArr.length/2;i++){
        if(codeArr[2*i]==1.0){
            codes.add(new Integer(i));
        }
    }
    
    int[] codeIdxs=new int[codes.size()];
    for(int i=0;i<codes.size();i++){
        codeIdxs[i]=codes.get(i).intValue();
    }
    
    return codeIdxs;
}    

private int[] getMapArea(int locIndex){
    int[] xyz=new int[3];
    
    xyz[0]=locIndex/(Event.divZ*Event.divY);
    locIndex=locIndex-xyz[0]*(Event.divZ*Event.divY);
    xyz[1]=locIndex/Event.divZ;
    xyz[2]=locIndex%Event.divZ;
    
    System.out.println("Retrieved locIndex: x="+xyz[0]+", y="+xyz[1]+" ,z="+xyz[2]);
    
    return xyz;
}

 private boolean isSamePattern(double[] a, double[] b){
        if(a.length!=b.length)
            return false;
        
        for(int i=0;i<a.length;i++){
            if(a[i]!=b[i]){
                return false;
            }
        }
        return true;
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CRSMDisplay().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
