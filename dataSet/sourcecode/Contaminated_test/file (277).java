package com.apptsunami.samples.yelpdatachallenge;

import java.util.Iterator;
import java.util.Set;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.WriteConcern;

/**
 * Super class to support database operation classes
 * 
 * @author stevec
 * 
 */
public class DatabaseOperation {

	private static final String DB_HOST = "localhost";
	private static final int DB_PORT = 27017;
	private static final String DB_NAME = "yelpdatachallenge";
	private static final String DB_USER = null;
	private static final String DB_PASSWORD = null;

	protected static final String MONGO_ROW_ID = "_id";
	protected static final String UPSERT_SET = "$set";

	protected MongoClient mongoClient = null;
	protected DB db = null;

	/* collection names generated by data loader */
	public static final String COLLECTION_BUSINESS = "business";
	public static final String COLLECTION_CHECKIN = "checkin";
	public static final String COLLECTION_REVIEW = "review";
	public static final String COLLECTION_USER = "user";
	public static final String COLLECTION_SIMILARITY = "similarity";
	public static final String COLLECTION_PREDICTION = "prediction";
	public static final String COLLECTION_PREDICTION2 = "prediction2";

	protected static class CollectionReview {
		public static final String KEY_USER_ID = "user_id";
		public static final String KEY_BUSINESS_ID = "business_id";
		public static final String KEY_STARS = "stars";
	} // CollectionReview

	protected static class CollectionUser {
		public static final String KEY_VOTES = "votes";
		public static final String KEY_USER_ID = "user_id";
		public static final String KEY_NAME = "name";
		public static final String KEY_AVERAGE_STARS = "average_stars";
		public static final String KEY_REVIEW_COUNT = "review_count";
		public static final String KEY_TYPE = "type";
		public static final String KEY_MALE_PROBABILITY = "male_probability";
		public static final String KEY_FEMALE_PROBABILITY = "female_probability";

		public static class Votes {
			public static final String KEY_FUNNY = "funny";
			public static final String KEY_USEFUL = "useful";
			public static final String KEY_COOL = "cool";
		} // Votes
	} // CollectionUser

	protected static class CollectionSimilarity {
		public static final String KEY_ORIGINAL_USER_ID = "original_user_id";
		public static final String KEY_BUSINESS_ID = "business_id";
		public static final String KEY_SIMILAR_USER_ID = "similar_user_id";
		public static final String KEY_SIMILAR_USER_STARS = "similar_user_stars";
		public static final String KEY_PCC = "pcc";
		public static final String KEY_COMMON_BUSINESS_COUNT = "common_business_count";
	} // CollectionSimilarity

	protected static class CollectionPrediction {
		public static final String KEY_ORIGINAL_USER_ID = "original_user_id";
		public static final String KEY_BUSINESS_ID = "business_id";
		public static final String KEY_ACTUAL_STARS = "actual_stars";
		public static final String KEY_PREDICTED_STARS = "predicted_stars";
		public static final String KEY_TOTAL_USER_COUNT = "total_user_count";
		public static final String KEY_ACTUAL_USER_COUNT = "actual_user_acount";
	} // CollectionPrediction

	protected static class CollectionPrediction2 {
		public static final String KEY_ORIGINAL_USER_ID = "original_user_id";
		public static final String KEY_BUSINESS_ID = "business_id";
		public static final String KEY_ACTUAL_STARS = "actual_stars";
		public static final String KEY_PREDICTED_STARS = "predicted_stars";
		public static final String KEY_TOTAL_USER_COUNT = "total_user_count";
		public static final String KEY_ACTUAL_USER_COUNT = "actual_user_acount";
	} // CollectionPrediction

	/* constructors */
	public DatabaseOperation() {
		/* no-op */
	} // DatabaseOperation

	public void openDatabase() throws Exception {
		mongoClient = new MongoClient(DB_HOST, DB_PORT);
		db = mongoClient.getDB(DB_NAME);
		if ((DB_USER != null) && (DB_PASSWORD != null)) {
			boolean auth = db.authenticate(DB_USER, DB_PASSWORD.toCharArray());
			if (!auth) {
				throw new Exception("Incorrect user name or password");
			}
		} // if
		mongoClient.setWriteConcern(WriteConcern.JOURNALED);
	} // openDatabase

	public void closeDatabase() {
		if (mongoClient != null)
			mongoClient.close();
	} // closeDatabase

	protected static void copyObjectExceptId(DBObject obj1, DBObject obj2) {
		Set<String> keySet = obj2.keySet();
		if (keySet == null)
			return;
		Iterator<String> itr = keySet.iterator();
		while (itr.hasNext()) {
			String key = itr.next();
			if (!MONGO_ROW_ID.equalsIgnoreCase(key)) {
				obj1.put(key, obj2.get(key));
			} // if
		} // while
	} // copyObjectExceptId

	protected static DBObject cloneObjectExceptId(DBObject obj) {
		BasicDBObject obj1 = new BasicDBObject();
		copyObjectExceptId(obj1, obj);
		return obj1;
	} // cloneObjectExceptId

	protected static Double getDoubleValue(DBObject dbObj, String key) {
		Object value = dbObj.get(key);
		if (value instanceof Double) {
			return (Double) value;
		} else if (value instanceof String) {
			return Double.valueOf((String) value);
		} else {
			return null;
		}
	} // getDoubleValue
} // DatabaseOperation
