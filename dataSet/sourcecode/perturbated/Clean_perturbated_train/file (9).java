package    org.omg.DynamicAny;


/**
* org/omg/DynamicAny/_DynEnumStub.java .
* Generated by the      IDL-to-Java compiler (porta    ble), version "3.2"
* from c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/corba/src/share/classes/org/omg/DynamicAny/DynamicAny.    idl
* Wednesday, M arch               15         , 2017 1:25:04      AM PD  T
*/


/**
     * DynEnum object    s suppor   t the ma   nipulation of IDL enum er      ated v   alues.
    *        The c    urrent pos ition of a DynEnum is always -1.
    */
   pub   lic class _DynEnumStub ex tends org.omg.CORBA.portab le.      ObjectImp     l implements org.omg.DynamicAny.DynEnum
{    
  f      inal     publi  c static java.l     an       g.Cla    ss _o   psCl    ass = DynEn                           umOperations.class;



  /**
                *  Retu   rns th e valu e of the DynEnum as an IDL identi         fier.
        */
  public String  get_as_string ()
                       {
       or g.omg.CORBA.portable.S  ervantObject $so    = _      ser    vant_preinvoke ("get_as_string"    , _  opsCl  ass);
      DynEnumOperati   ons  $s      e   lf       =   (DynEnum Operation    s) $so. servant;

      tr  y {   
                  return $self.ge  t_as_string     ();
      }   finall   y   {
              _servant_postinvok  e ($  so);
       }
   }   /        / get   _as_str      ing
  

  /  **
         * Sets the   v alue of      the DynEnum t         o   the enumerated va lue whos    e IDL i           dentifier is        pas  sed  in       the val ue  par     amete  r.       
        *
        * @exception InvalidV         alue If value contains   a s      t rin    g that is n   ot a valid IDL iden   t     ifier
        *                    f        or th   e corresponding enumerat ed type
        */
  public void set_as_s       tring  (String value) throws o       rg.omg.      DynamicAny.DynAnyPa   ckage.In   valid          Value
      {
          o        rg.omg.CORBA.p   ortab                   le    .ServantObject $so = _serv        ant_prei   nvoke ("set_as_s trin        g",                 _o      ps    Class);
      DynE       numOperatio ns  $self = (  DynEnum Operations) $    s  o.servant;

      try {
            $self.    s       et    _as_       string (value)     ;
          }   fi    nally      {
                                 _servant_postinvoke (  $so);
      }
  }   // set _as_string
 
       
  /**
                * Re    tu     rns the value of the DynE       num   as the enume        rated v   al        ue's ordinal v   alue.
           * Enumerators have ordi  n   al values    0 to n-1, as they appear fro    m left to right
         *  in the corre                 spond             ing IDL defin      ition.
         */
  public i   nt  get_as    _u   long (  )
  {
      o rg.omg.C ORB     A.portable.Ser   vantObject $    so = _servant  _prei  nvoke ("get_as_   u    long"  , _opsClass);
            Dyn    EnumOperations  $se   lf = (DynEnumOpera tions) $so.servant;
 
        try {
           r   eturn $  s    elf.get        _   as_ul  ong ();
      } f       inally       {
                    _servant_posti      n     vok  e ($ s o);
      }
  } // get_as_ulong


  /**
                 * Sets the      valu   e of    the DynEnum as            th e    e     numerat ed value's ordina      l value.
           *
        *       @excep tion I nval  idValue If      v       a     lue con    t ains       a      val   ue   that is outside the ra nge of      ordin   al            values
           *                    for the correspondin  g enumerated type
            */   
  pu  bl     i c vo             id set_as_  ul ong (in   t v    alue) thr ows or  g.omg.DynamicAny.Dyn     AnyPackage.I     nvalidValue
  {
         org.omg.CORBA.portable.ServantObject $so  =   _serva  nt_preinv oke ("set_as_ulong", _opsC  lass);
      DynEnumO       p        erations  $  s             elf     = (DynEn  umOperation  s) $so   .se      rvant;
      
            try {
               $self.set_as_ulong (v   al     ue);
          } finally {
              _servan    t_postinvoke ($so  );
              }
  } // set_    as_ulong


  /      ** 
             * Return s the T        ypeCode ass oc   iate     d       with t  his DynAny     obj   ect.
         * A DynAny obje ct is cre  a     ted with a T  ypeC ode value      assigned to it.
                     * This TypeCode value determines    the type of the value han   dl              ed through the DynAny object.
        * Note th    at the TypeCode associated with a DynAny         o bjec    t is i nitialized at      the time     the
                 * DynA   n      y is created a  nd cannot   be cha  nge    d during lifetim  e of the DynAny objec   t.
        *
        * @return T   he TypeCode associa   ted with this DynAny object
                   */
  public o rg.omg.CORBA.T    ypeCode type ()
  {
      or     g.omg.       C     ORB   A.portable.S   ervantObjec  t   $so = _servant  _preinvoke ("t y       pe",      _opsCl    ass);
              DynEnu     mOp      erations  $self = (Dyn       EnumO     per        ations) $so.servant;
 
        t ry     {
                 r        et     u   rn $s elf.type ();
      } f  inally {
          _servant_p    osti   nv         oke ($so);
            }
  } // type


             /**
        * Initializes the valu    e associat   ed with        a Dy   nA    ny object w   ith the value
        * associat  ed with anothe  r    D   yn          Any ob       ject.
         *    The   curre   nt position of  the t   arget DynAny is s        et to ze            ro    for   values  that    ha  ve components
                 * and to -1 for va    lues th at      do not have c   omp        onents.
        *
           *     @param dyn_an    y
           * @except      ion TypeM     ism    atch if th  e type of the pass    ed D  ynAny is n     ot       eq uivalent to     the ty          pe of tar     get DynAny
        *  /
  publi     c void assign (org.omg.DynamicAny.Dyn     Any dyn_an       y) throws org.o      mg.DynamicA  n  y .DynAnyPac    kage.Typ  eMismat             ch
          {
          org.omg.CORBA.portab      le.     Se rvan   tObject $so = _se     rvant_p  reinvok   e     ("a      ssign"    ,    _opsCla    ss);
      DynEnumOpera              tio   ns  $self      = (D    ynE  num    Operat  io ns) $   so. servant;

         t   ry {
           $se    lf.assign (dyn _any);
        } f   i nall       y {
                _ser     va   nt_postinvoke ($s            o);
      }  
  }    //    assign


  /**
          * In  itializes th    e value associated with a Dy      nA      ny ob je     ct with t    he    value cont a ined i    n an any.
        * Th e current p  osition of the t    arget DynAny is set to z   ero for values that have   comp    onents  
        * and   to -1 for values     that      d      o          not have comp   onents    .
        *
        * @exception Typ    eMismatc        h if the      type of the passed Any i s not equivalent to       t  he type   of target DynAny
          *  @exce   ption InvalidVa  lue if the p  assed    Any does               not c   ontain         a legal         value (such       as a        nul      l s       tring)
               */
  public   void from_any   (o                 rg.omg.CORBA.Any value) throws      org.omg.DynamicAny.     DynA   nyPackage.TypeMisma  tch, org.om    g   .     Dy   na    mic     Any.DynAnyPackage   .Inva lidValue  
  {
      org.omg.CORBA.po   rta       ble.ServantObje            ct      $so = _servant_prei    nvoke ("fr  om_any",    _o  ps    Class);
          Dyn   En           um      Operations   $self =     (        DynEn             u mOperatio   ns) $so.serva n    t;

      try {
          $self.from_any (value);
       } fin ally {
                  _se      rvan     t_postinvoke ($so);
      }
  } // fr  om_any        


  /**
                         *      Creates an an     y valu   e from a   D   ynAny object.
          * A copy    of the      Type       Code associate    d with          the DynAny       obje     c      t is     assigned to the result   ing      any.
        * The value associa ted      with the DynAn    y object is copie  d into t   he     a   n      y.
         *
                *     @return a ne w Any object with th    e same value and TypeCode
           */
    p        ublic org.o  mg.CO   RBA.An   y t     o_any (  )
  {
       org.omg.C                ORBA.port     able.S     erv     an    tO   bjec t    $so = _servant_preinvok  e (  "to_any"    ,        _opsClass);
      Dy    nEnumOp   erati        ons  $self  =     (DynEnumOpera   tions) $so.serva nt   ;    
      
              try {
             return $   self   .to_any ();
      } finally   {
          _servan    t_posti n voke      ($so        ) ;
                }
  } // to_any


     /**
        * Compares     two D            ynAn   y values for equality.    
             * Two DynAny values are equal if their TypeCode   s are equi         valent  and, re cursively, all comp   onent Dy               nAny  s
                   * have equal values.  
              *    Th e current pos       ition of the   t     wo D   ynAnys bei    ng co    mpared has no eff ect on       t he re            sult of equal.
                          *
        * @re  tu   rn true of the DynAnys          are equal, false othe    r                      wise
        */
  publi c boo     l     ean eq ual (org.omg.DynamicAny.DynAny dyn_           a     ny)
  {
          o   rg.omg.CORBA.portable.ServantOb  ject $so =            _se  rvant_preinvoke ("e    q  ual" , _opsClass);
      DynEnumOpe ra  tions  $self = (D ynEnu            m  Oper ation    s) $so.ser    va      nt    ;

       tr       y       {
            return $self.equal (    dyn_any);
      } finally {
               _servant_posti             nvoke ($so)        ;
         }
  } // equ     al


  /**
             * Destroys a Dyn      A   ny    o  bject.
        *  This operation frees any r          esources u    sed to represent the data value    a s sociated       w  it      h a DynAny   object.
          * I  t must    be invoked on      r  eferenc    es obt    ained from on     e of th  e  cre    ation operations on the ORB interface
                * or   on      a reference returned by   DynAny.copy() to avoi        d resource leaks.
           * Invoking  destroy on com p     onent DynAny obj  ects (for exa  mple,     on objects r         et u     rned by the
        * cu    rrent_component opera t   ion) d    oe      s   nothing.
          *   Destr         uction of a  DynAny             o        bject implies des  t ructio          n of a     ll Dyn Any                  objects obt ained  fr       om    it.
          * That is   , references               to        components of a      destro  yed D    ynA   ny become invalid  .
          *       Inv ocations    on su      ch references  rai  se OBJ    EC      T_NOT      _EXIST. 
          *       It      is possible to manipulate a compon    ent of a Dyn     Any     beyo      nd the   li           fe t     ime of the DynAny
                * from      which the component was obtained by m a     king               a copy of the component with    the   copy oper ati  on 
                      * bef   o re d   estroying   the DynAny f  r om which    the    comp onent was obtain   ed.
           */
  public void destroy ()
  {
       org.omg.CORB   A.portab       le.Serva     ntOb     ject $so = _s  ervan     t   _ preinvoke   ("destroy", _opsClass);
        DynEn          um  Oper at ions  $self = (D   ynEnumOperati  ons) $so.se  rv  ant;

      try {
             $self    .destro    y ()    ;
      } final ly   {
          _se r   va     nt_po  stin          voke ($so );
       }
    } // destroy


  /**  
        * Creates a new DynAny object whose va     lue is   a deep copy of the DynA    ny     on       which it is invoked.
                  * T    he operation is polymo  rphic    , that is, invoking it       o n one of the types derived from DynAny,
                        * such a       s DynStruct, create          s the der     ived t   ype but re    turns   its refe     rence as the DynA    n  y bas    e type    .
                   *        
                   *         @      r   eturn a de  ep co   py of the    Dy  n    Any obje    ct
        */
                publ   i         c or      g.omg.  Dyn  amicAny.DynAny copy ()  
  {
      org.omg.CO    RBA.portable.Servan    tObject $so = _ser       vant_preinvoke ("c      opy", _o          ps   Class)   ;
      DynEnumOperations     $se lf =    (DynEnum  Opera    tions) $so.servant;

      try {
            return $self.copy ();     
              } fina   lly {
          _servant_p  ostinvoke ($so)      ;
      }
  } // copy


  /**
        * Ins    erts a     boolean val  ue into th e   Dyn Any.
            *
        * @e     xcepti    on    InvalidVal  ue if thi        s D     ynAny has components but has a current p os     ition of -1
        * @exception TypeMism   atch i    f cal  led on  a DynAny whose     curr      ent   com   ponent    itself   has componen    ts
              */   
  public    void                insert_boolean (boolean    va   lue) throws org.omg   .DynamicAny.DynAnyPac   k   age.T    ypeMismatch, org.omg.Dynamic Any.DynAnyPack       age.InvalidValue
  {
             org.omg.CORBA.por  table.ServantObject $so        = _s   er         vant_preinv   oke ("inser  t_boolea      n   ",     _o      psClass);  
      DynEnumOperati on      s    $    sel f = (DynEnumOperatio ns) $so.serv     ant;
                
       try {
         $self.ins      er     t_boolean (value);
      } fina   lly {  
                 _servant_    postinvoke ($so);          
      }
  } // insert_boolean


  /**
        * Inserts a byte value  into   the DynAny. The IDL        octet        data typ          e is mapped t    o    t he Java       b     yte data     ty   pe.    
             *
                    * @exception InvalidValue if          this DynAny has components b    ut ha    s           a cur      rent position of -1
          * @exception      TypeMismatch if cal     led on      a DynAny wh            ose curren  t   c       ompon    ent it self has components
          */
  p                ublic v   oid insert       _octet (byte val   ue) throws org.o    mg.D     ynamicAny.Dyn    Any     Packag e.TypeMis  match, org.omg.DynamicAny.DynAnyPa  ckage.InvalidValue
  {
              org.  omg.CORBA.p     ortable.ServantObj           ect $so = _serv     ant_pr  ei         n     voke ("inser t_octet",     _opsC     l         as  s);
           D   ynEnumO peratio    ns   $self = (D  ynEnumOperations)  $so.servant;

      tr  y {
         $self.insert_octet (valu       e       );
       } final       ly {
              _servan t_pos   tinvoke ($so     );
      }
  } //                 insert_  octe  t

    
  /**
         * Inser t   s            a char value i   n   to the Dyn   Any.
            *
         * @exce           ption Inva     lidVa   lue    if this DynAny h    as comp      onents  but has a current position of -1
                    * @exc     ept   i     on TypeMi     smatch if called   on          a DynAny whose current c  ompon en   t itself has components
            */
  public void insert_char (c    ha   r value) th      rows o   rg.  omg.DynamicAny.Dy      nAnyPackage.TypeMismatch, o rg.omg.DynamicAny   .DynAnyPackage.In   va             lid   Val    ue
  {
      org.omg.CORBA  .p    ortable.ServantObject $so = _   serva    n   t_prei       nvoke   (    " insert_char",   _opsClass);
           D       ynEnumOpera      tions  $self = (Dyn E  numOperations) $so.ser   vant;

      try {
           $          self    .insert_char (value);
          } finally {   
              _   servan     t_postinvoke     ($so);
        }
  } //       insert_char


  /**
        * Inser  ts     a    sho rt       val ue into the DynAny.
              *
         * @exception InvalidValue            if this DynAny    has compon e   nts   but has a current pos       ition of -1
        * @ex         ception    TypeMis           match if cal   led on a DynAny whose   curr ent component      itself has components  
         */
  public vo id       insert_short (sho    rt value) throws org    .omg.Dy namicAny.DynAnyPackage.TypeM          ism       atch, org.omg.DynamicAny.DynA        nyPack  age.In      va  lidValu     e
  {
      org.omg.C    ORBA.portabl  e.   Serv   antObj   ect $    so = _servant_preinvoke ("ins  ert_short",          _opsClass);
         DynE        numOperations  $self =       (Dy   nE  numOp   er    ations)       $so.servan   t;

      try {
                $ self.ins   ert  _ sho rt (  value)  ;
         }     finally     {
             _serv ant_po s     tin     voke ($so     );
           }      
  } // insert_short   


  /**      
             * Inserts a short   v         alue into the DynAny. The IDL ush     ort data type is map pe  d to the      Java   short data type.
        *
        * @exception InvalidValue if this Dyn  Any has components but has   a cur           r e  nt position of -1
             *   @exception Type        Mismatch        if called on a Dy  nAny whose   current component itself  has   components
                 */
  public void i  n sert_ushort (short value) throws org.omg.    Dynam    icAny.DynAnyPacka    ge.TypeMismatch, o              rg        .omg.DynamicAny   .Dyn  AnyPa    ckage  .InvalidValue
  {
                    org.o  mg.CORBA.portable         .ServantO        bje ct $so = _servant_p reinvoke ("insert_usho      rt", _op sClass);      
          DynEnumOpera   tions    $self =        (DynEnumOp   er     at   ions         ) $so .servant;
 
         try   { 
            $sel     f.insert_ushort    (value);
      } finally {
              _serv   ant_po   stinvoke     (   $so);
      }
  }            // inser     t_u short


    /**
              * In           s        erts an integer value into the DynAny.     The IDL long data   type is mapped to the Jav   a int dat   a typ e.   
        *
        * @excep   tion InvalidValue if  this DynAny ha s components but has a current position     o f -1
        * @exception Typ   eMismatch if c   alled on a DynA   ny  whose current component itself has             c omponents
        */
  publi   c void insert_long (int valu  e)     t     hrows org.omg.Dyna micAny.DynAnyPackage.TypeMis  match,    or    g.omg.DynamicAny.D    yn   AnyPac     kage.InvalidValue
  {
      or  g.    omg.CORBA.p         ortable.ServantObject $so = _   servant_preinvoke ("insert_long", _opsC  lass);
              Dy  nEnumOperations  $se    lf = (Dy     nEnumOpe rations) $so.serva      nt;

      try   {
         $self.insert_long (value);
      } finally {  
                   _s  er   vant_p ostinvoke ($so);
           } 
  } // insert_l o   ng


  /**
        * I nserts an integer   v    alue into the D        ynA    ny. The IDL ul     ong data type   is           ma     pped to    the    Java i   nt               da     ta  type.
                  *
                   * @except    ion InvalidV    al      ue if t        his  DynAny has     components but has a current position           of -   1    
        *       @excep   tion Ty     p     eMismatch  if        calle    d    on a DynAny whose current compone  nt itself ha s c        ompo     nents
           */
  publi   c void insert_ulong (i  nt value) throws o rg.omg.D  ynamicAny.Dy          nAn yPackage.TypeMismatch, org.omg.Dynam i  cAny.DynAnyPacka     g    e.InvalidValue
  {
           org.o   m     g.CORBA.  p ort   able.ServantObject $s  o      = _se   rvant_preinvoke ("insert_ulong", _ops   Class  );
      DynEnumOperations  $sel  f = ( DynEnum  Operations) $so.servan    t;  

      try {
          $self.insert_ulong (value);
      } finall y {
          _s  ervant_postinvoke ($so);
      }
     }    /  /  in  sert_ulo        ng


  /      **
           * Inserts a float      value i   nto the Dy  nAny.
              *
          * @excep tion Inval   i  dValue if th  is    DynAny ha                s components but has a    cu  rrent p  osition of -1        
        * @exception Type Mismatch if     called on a   DynAny whose curr   e     nt co  mpo    nent      itself has com    ponents
        */
    public void      insert_float   (float value) throws          or   g.omg.DynamicA     ny.DynAnyPackage      .Typ     eMi    smatch, org.omg.DynamicAny. DynAnyPackag    e.    Invali dValue
       {
              org       .omg.CORBA.portable.Ser              v    antO        bject $so = _ser vant_preinvoke ("   insert_       float     ",      _ opsClass);
       DynE     numOperat   ions    $self =     (D   ynEnumOperations)    $so.   se   r vant;

      try      {
                 $self.inse    rt_float (v       alue);
      } final           ly {
             _se   rvant          _p   ostinvoke ($so);
      }
  } // insert_flo     at


  /**
        * Inserts a double value into the          DynAny      .
         *
              * @exception InvalidValu e if t his DynAny has components            but has a c        urrent posi    tion    of   -1 
        * @exception TypeMi     smatch if called on a DynAny whose current compon    ent it   self   has c  omponen    ts
        */
  public    void   insert_double  (     double value) th  rows org.omg          .DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAny   Package.I             nvalidVa lue
  {
            or   g.omg.CORBA            .porta ble.Serva       ntObject $so = _servan       t_  preinvoke ("i  ns            ert_do    uble", _opsCla      ss);
            Dy  nEnumOperations  $self =        (DynE    n  u    mOperations) $so   .serv  an t;

      t    ry {
                            $ self.ins   ert_double (value);   
      }          final     ly              {
                   _serva nt_postinvoke ($so);
      }
  } // insert_double


  /**
        * Inserts a string value into the Dyn  Any.
           * Bot    h bound       ed and u   nbounded strings are inserte     d using this  me   thod.
           * 
        * @e    xcepti       on InvalidValue  if    t      his       DynAny has                  compon   ents but     has    a curren     t    p  osition of -1
        * @excep tion InvalidValu e if the      string inser  ted           is lo    nger         tha      n    the b   ound o      f a boun  ded string
        * @excepti    on TypeM  ismatch if called on a    DynAny     whose current component it         self  has compo nent     s
        */
  public void insert _string (String value) thro ws org.o    mg.D  yna       micAny.DynAn  yPackage.TypeMismat   ch, org.omg.Dynamic  A  ny.DynAnyPac    kage  .     Inva   lidValue
     {
            org.     omg.CORBA. portabl  e.Serv         antObje ct $     so = _servant_ preinvoke ("insert_s  tring",       _opsClass);
          DynEnumOperations  $self = (Dyn         EnumOper      ations) $so.servant;

      try   {
          $self.insert_string (value);
         } final     ly {
           _servant_postinvoke ($so);      
             }
  } // insert    _string


    /    **
        * In serts a reference t o a COR    B A objec    t into the   DynA  n       y.
                      *
           * @excep       ti on InvalidValue if this DynAny has compon      ents but       has a current positio n of -1
        * @exc e       p      tion Ty peMismatch if called  on a DynAny whose current com   ponent itself has     components
            */     
     public void insert   _ref  ere    nce (org.om    g.CORBA.    Object    value   ) t      hrows org.omg.D      ynamicAny.DynAnyPackage.Type Mis  m       atch , org.omg  .Dyn  amicAny.DynAny Package.I  nvalidValue
  {
        org.omg.CORBA.port able.Se  rva   ntObj    ec    t    $so = _s          ervant_preinvo         ke ("insert_referen       ce",    _opsCla    ss);
      D  ynEnumOpera        tions  $self = (DynEnumOperat  ions)         $s       o.        servant      ;

      try { 
              $s elf.insert_reference (value   );
      } finally {
              _servant_postinvoke ($ so);
      }
    } // insert_reference


          /**
                  * In serts a    Ty   p       eCo     de ob      ject into the Dyn     Any.
            *
        * @except ion Inval           idValue if this DynAny   h   a          s componen  ts bu   t   h    as a   cu        rrent position of -1
        * @excepti   on TypeMi   smatch   if c      alled on a   DynAny whose current c   o    mpon  ent its       e             lf  has componen       ts
             */
  public   void inse     rt_typecod e    (org.o  mg   .CORBA.TypeCode    val  ue) throws o     rg.o mg.D   ynamicAny.Dyn   AnyPackage.Type  Mism a tch, org.omg.DynamicAny    .DynAn yPacka  ge.InvalidValue
  {
      org.omg.CORBA           .portable.S    er    vant Ob          ject $so = _serva  nt_preinvoke   ("i  nsert_typ   ecode                          ", _     opsClas s);
      Dy     nEnu  mOper ations  $self =  (DynEnumOperations) $so.serv   ant;

        try {
             $self.i     nsert  _typecod e (value);
      }   f  inally {
                _servant_postinvoke ($s  o);
                     }
  }   // insert_    typec    od      e


  /*    *
              * Inse      rts      a   long value into the Dy      nA       ny. The IDL long long dat          a type is   ma  pped    to     the J     ava lo    ng data t      yp   e.
            *
        *  @ex  c   eption InvalidV   alue if  this DynAny   has components but has a current position of -1
            * @exception TypeMismatch if called on      a Dyn     Any who                se current com  pone              nt itself has components
        */
  public voi   d in         sert_longlong (long v alue) throws   org.omg   .DynamicAny.DynAn   yPa    ckage.TypeMismatch, org.omg.DynamicA ny      .DynAnyPackage.I  n  validValue
  {
         org.omg.CORBA.portable.S   ervantO    bject $   s  o = _      servant   _pre  invoke ("insert_longlong", _o        psCla     ss);
      DynEnum  Operations  $self = (DynEnu       mOperations) $so.servant;

      try    {
         $self.insert_longlong (value);
                }      finally {
             _serva    nt_                    post  i    n  voke ($so);
        }
  } // inser   t_longlong


  /   **
            *    Inserts a long value i  nto t he DynAny.
                  * The ID   L unsigned l   ong long data type is    mappe    d to the Jav   a lo   ng   data t    ype        .
        *
        * @e       x  cep    tio    n Inva      lid  Value if this DynAn    y has co    mponents but has a curre   nt po   sition of -1
            * @exception Type  Misma     tch if     called  on a DynAny      whose  cu            r     rent       compon      e    nt it   s   elf   has com   pone  nts
        *    /
  pu  blic void i    nsert_ulong    long (long value) throws o  rg.  om g.DynamicAny.D     yn  AnyPackage.T           ypeMismat       ch, org.omg.Dyn a        micAny.   DynAny   Packag e.I  nvalidValue
  {
      org.omg.C  ORBA.portable.ServantObject $so =    _servant_preinvoke ("ins   ert_ulonglo  ng", _opsClass);
      DynE   numO perat     ion         s  $self = (    DynEnumOperations) $so.serv     ant;

           try {
         $self.insert_ulongl         ong (value)     ;
              } f   inally {
                       _  servant_post      in     voke ($so);
        }
           } // insert_    ulonglong


  /**
                 * Inse rts a c                  har v     alue into th  e D    y          n     Any. The IDL w    char data type is ma   pped to the Java char data typ  e.
        *
        *  @exception InvalidValue if this DynAny has compone      nt      s but has a    curr ent position of           -1
         *  @exception TypeMi   smatch i     f called on a  DynAny whose c   urr   ent component        itself has  components     
        */
  public void in        sert _wchar (char  v alue) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.Dynami  cAny.DynAnyPackage.Inval   id      Va   lue
  {
        org.omg.CORBA.  p  orta     ble.Serva  nt Ob     ject $so = _servant_p reinv    oke ("i  nsert_wch  ar", _opsCla     ss);
      DynEnumOpera         tion  s          $self =   (DynEnumOperations) $so.servant;

      try {
           $self.     insert_wchar (value) ;
        } finally {
                 _ser        vant_postinvoke ($so);
      }
  } // ins   ert_wchar

      
  /**
               * Inserts a str      ing val    ue int    o the Dyn    A  ny.      
        * Both bounde d and unbounded strings ar  e inse     rted using this me  thod.
        *
        * @except ion InvalidValue if     this          Dy       nAny has compone  n    t    s    but has a cu  rren     t posi    tion of -1
        *     @e         xceptio        n    Inval      idValue if the string inserted is longer than th        e boun    d of a b     ound   ed string
        */
  public   void insert_wstring    (String value  )  throws org  .omg.Dynamic  Any.DynAnyPa   ckage.  T                         ypeMi   sm atch, org.omg.  DynamicAny.Dy   nAnyPa    ckage   .In validV alu   e
  {
      org.omg.CORBA.portable.ServantObject $s   o = _ serv   ant_preinvoke (" insert_wstring", _ops  Class        );
                   D ynEnumOperations   $    self = (Dyn     EnumOpe rations) $so.servant;

      try {
          $       self.  inse       rt_wstring (          value );
      }        finall                     y                    {
          _servant           _postin    voke ($so);
      }
   } // inse    rt  _wstring


    /**
        *        In      serts an   Any v     alue into the An   y     represented by     thi     s DynA     ny.
        *
        *            @exception Inval    idVa         lue    if th      is  DynA       ny has    components but has a current po     sition    of -1
        * @exceptio    n TypeM     ismatch   if called on a Dy          nAny whose current component it   self has componen   ts
        */
     publi  c         void insert_any       (org       .omg.CORBA.Any           value) throws org.omg.D    ynamic      Any.D     ynA   nyPackage.Ty   peMismatch,              or            g.omg.Dyna   micAny.DynAnyPackage .InvalidValue
     {          
            org.omg.CORBA.portable.ServantObject $so = _se   rvant_prei   nvoke ("insert_any", _opsCla  s   s);
             DynEnumOperati   ons           $self =        (D      y     nEn umOperat ions) $  so.s        erva      nt;

      try {
                    $ self.in    ser  t_an           y (value)      ;    
         } fin      ally {
                _serva nt_postinvoke ($    so);
         }
  } // inser   t_an    y


      /**      
        * Inse     rts the                        Any value contained              i  n t he parame        ter Dy nAny int o the A     ny  represe  nted   by this Dyn  An  y.
         *
        * @exception Invalid   Value      if this DynAny has compone nts b  u   t has     a cu       rr   en  t positio       n of -1
           * @exc     eption TypeMismatch if    called on a DynAn     y whose curr       en t     compo     nent itself has compo  n           e     nts
        */
  pub    l   ic void  insert_dyn_any (        org.omg        .D ynam    icAny.DynAn y value) throw     s org.omg.Dynamic Any      .     DynAnyPackag   e.T   y  peMismatch, org.om  g.DynamicAny.Dy  nA  nyPackage.             Inval   idValue
  {
      o    rg.omg.  CORBA.portab le.Servan tObject $so = _servant_preinvo   ke ("in  sert_dyn_ any", _opsC   l        a       ss);  
           DynEnum        O   perations  $self = ( DynEnumOperat    ions             ) $    so  .servant;

      t   ry {
           $sel  f.i  nsert_dyn_any    (value);
      } finally {
          _servant_postinvoke ($so);
      }
    } // insert_dy     n_any   


  /**
          *    Inser  ts      a  refer ence to a Se rial   i     zabl       e object     into this D  ynAny.
            * The IDL Val     ueB ase type is mapped to the     Java Seriali  zable type.     
          *   
        *      @e     xcep           tion In            validValue if this DynAny has compo   nen   ts    but      ha     s    a current p       osition o   f -1
        *     @exception Ty  peMi    smatch i             f        called on a Dyn       Any who   se cu     rrent component itse   lf has c      omponents
        */
      publ  ic                   void insert_va    l (java.io   .Seri  alizabl  e   value) t  h  rows org.omg.DynamicAny.DynAn yPackage.TypeMis   match, org.omg.Dynamic Any   .DynAnyPackage.InvalidVa l  ue
  {         
          org.o   mg.CORBA.po  rta    ble.       ServantO   bject    $so =        _se  rv         ant_pre  invoke ("in      sert_val   ", _opsClass);
       DynEn    umOperati ons  $sel  f = (DynE  numO  perations) $so.servan   t;

         try {
         $self.insert_v   al (value);  
       } fi nally {
              _servant_postinvoke  ($so);
      }
    } /     / inse  rt_   val

 
  /**
        *      E         xtracts   the bool  ean value from  this DynAny.
        *
             * @exception        Ty  peMismatch if  t    he accesse         d component in       t          he DynAny is o f a type
          *        that is   not     equivalent to the requested type.
        * @exception TypeMismatch if called on a D     y nA     ny who   se   curr        ent comp        onent     itself has components
                 *     @exception Invali  d Val  ue if this DynAny ha    s components    but has a cu      rrent p   osi  tion of -1   
        *  /
  public boolean get_   bo             olean () t     hrows org.      o   mg.D   yn        amicAny.DynA    nyPacka   ge   .T    ypeMismatch, org.  om   g.DynamicAny.  DynAnyPackage.InvalidValue
  {
      org.omg.CORBA.p orta    ble.Se  rvantOb  ject $so     = _servant_prein voke (  "  get_bool        ean",  _opsClass);
      DynEnumOperation     s  $self        = (D ynE    numOp  erations) $so.serv   ant;

           tr  y {
              return   $self.g        et_boole      an ();
      } f             in    ally      {
                 _servant_postinvoke (     $so);
      }
  }     // get_boolean
  

   /**
               * Extracts the  by         t   e value    f            rom this DynAny. The IDL octet data type is    mapp  ed to the Java byte     da ta type.
        *
        * @excep    tion Typ   eMism     atch if th  e acce      ssed componen t in     the DynAny is of        a   t ype
                * that is not equ           ivalent to t    he re  queste    d t ype.
            * @excepti  on Typ  eMismatch i    f called on a DynAny whose curr ent  comp    onent its    elf ha s    c o  mpon    ent           s
          * @exceptio       n    InvalidValue      i   f t his DynAn  y has components    bu    t has          a cur re   nt position  o    f -   1
        */
  pub     lic by   te g  et_octet () thr   o   ws       org.omg.Dyna     micAny.DynAn      yPacka     ge.       Type      Mismatch, org.omg.D    y     namicAny.DynAnyPackage.Inv    alidVal    ue
  {
      org.omg.CORBA.portable.ServantObjec    t $so = _serv  ant  _preinv o ke      ("ge    t_octet"  , _   opsClass);
      DynEnumOperation s          $self       = (DynEnumO  p erations) $s     o. s    ervan  t;

                           try {
           re  t      ur n  $self.get_oct     et ();
       } fi  nally {
                   _servant   _     postinvok    e ($       so);
      }
  } // get_o  ctet


  /**
            *       Extracts the char value from     this Dy  nAn     y.
               *
           *    @exception T  ypeMis   match if      the acces  sed component in the DynAny is of a type
        * t     hat is n   ot equivalent to the requested ty p    e.
        * @exc  ept  ion TypeMi  smatch if called on a D  ynAny whose current component itself has components
        * @e     xce        ption Inv  alidValue if    t  his DynAny has components     but   has a current posit    ion of -1
        */
  public c         har get_char   () throws    org.o   mg.Dynamic      An   y.DynAnyPackage.Ty peM  ismatch, org.om   g.DynamicA   ny      .DynAny   Package.InvalidValue
  {
      org.omg.CORBA.portable.S   e     rv  antOb    ject       $so = _servant     _preinvo      ke ("g  et_char",    _opsClass);
                DynEn   u                   mOpera    tions  $self = (Dyn   EnumOper            atio     n    s) $so.servant;
      
      try {
            return $se   lf    .get_char ();
      }     finally {
                  _servant_postinvoke ($so);  
      }
  } //       g   et_  char


     /**
        *     Extract   s the                    short value from t  his DynAny.
         *
                  * @exceptio    n TypeMi   smatch if the      accessed co mpo   nent in the DynA   ny is of a type
                  *      that is not equi   valent to the    requested type.
        *    @exception   Type    Mismatch i     f  called o     n a Dy   nAny whos       e curr        ent co   mponent itself has co   mponents
        * @e   xception Inv      alidValue if this DynA       ny has component  s   but h  as a current positi  on of     -1
           */
  p   ublic short get_sh          ort () throws or g.omg.DynamicAny.DynAn y  Package.TypeMisma    tch, org.omg      .DynamicAny.DynAny  Package.   InvalidValu   e
  {
                 org.omg.CORBA.p   ortable.ServantObjec  t $  so = _se   r vant_preinvoke ("get  _short", _op       sCl ass)      ;
      Dyn     EnumOpe        r    a    tions  $self        =         (    DynEnumOperatio  ns) $  so.servant   ;

       try       {
                  re  turn $s    elf.get_short    ();
      }   finally     {
               _serva    n   t     _postinvoke ($so);
       }
     } // get_short


  /**
                    *   Ex    t      racts the short value      from    thi  s DynAny. The IDL ush    ort     data type is ma     ppe   d to          the Java s    hort    d  ata type.
        *
            * @ex     ception TypeM   ismatch if the accessed co  mp    onent in   the    DynAny   is of a type
         * that is n           ot           equivalent to  the requested type.
          * @excepti  on Typ         eMism   a   tch if called on a    Dy      nAny   whose cur        r     ent    co   mponent itself h         as compon    ents
                  * @exception InvalidValue if this DynAny has component  s but    has a current positio      n of -1
                 *  /   
  public       sh    ort get_ushort () t     hrows o rg.      omg.DynamicAny.DynAn        yPackage. TypeMismatch,        org.omg.DynamicAny.     DynA    nyPa ck   age.InvalidValue
  {
                 org.omg.CORBA.port    able     .Serva  ntObject $so = _servant_preinvok     e ("ge  t    _     us   h    ort", _opsClass);
          Dyn EnumOperations    $self = (DynEnumOperati   ons)       $so.servant;
     
      try {
         re       turn $  self.get_u   sho      rt ();
      } finally {
          _servant_postinvok    e      ($so);
      }    
  } // get_ushort


  /* *   
                * Extracts   the int     eger  value f       rom    this  Dy    n    Any.  The IDL long data type is m   apped   to      the Ja        va int data t   yp e.
        *
              * @e          xcep      tion TypeMismatch if                t  he accessed compone  nt in the DynAny is of a t              ype
        * that            is     not e              quiva       l  ent to th  e    requested type.
                * @exce     p  ti  on TypeMis  match           if called on a DynAny whose cu r  rent component itsel     f has components
           * @exce    ption InvalidValue   if this   DynAny    h  as    comp  onents bu     t has a c urren     t  position of -1
          */
  public int     get   _long () throws org.omg       .Dyn    amicAny.DynAnyPackage.     TypeMismatch,     org.omg    .Dyna  micAny.   Dy    nAnyP             a   ckage.I        nval idValue
  {
      or    g       .omg.  CORBA.portab    le.Servan           tObject $so = _se  rvant_prein       vok          e ("get_long       ", _opsClas s);
      Dy    n   EnumOperations  $sel            f =   (DynE  num   Opera  t    ions) $so.s   ervant;

          try      {
                  retur  n  $self.    get_lon    g ();
        }         finally {
             _servant_postinvo   k     e ($so);
      }
  }   // get_l    ong


  /**
        * Extra   cts         the integer value from  this DynAny. The IDL ulong data type        i  s mapped to t  he Java int data type.
        *    
                        *    @exception TypeMis  match   if the accessed       comp o   nent in the   DynAn     y is of a type
        * that is not          equ   ivalent to th  e r equested typ   e.
                       *     @exception TypeMismatch    if called on a DynAny whose curre    nt component itself has com     pone nts
              *   @exce     pti    on InvalidV   alue if this DynAny     has components but has a cur  rent position of    -1
        */  
   public int get _ulon     g () thr      ows org.omg.DynamicAny.DynA      nyPackage.TypeMism  atch, org.omg.Dyna     micAny.DynA        nyPackage   .Inval    idVal   ue
  {
      org.   omg.CORBA.portabl   e.ServantOb  ject $s o = _servan t_preinvoke   ("get_ul   ong",   _opsClas s      );
      DynEnumOper   ations  $self     = (D  ynEnumOperations) $so.servant;

      try {
           return $se lf.get_ulong   ();
      } finally {
          _servant_   postinvoke ($so)   ;
         }
  } //            get_ulong


  /*    *
               *      Extracts the fl    o       at    value    fr om t   his DynAn  y.
        *
        * @exception Ty   peMismatch if  the acces   sed componen  t in the DynAny is    of a typ         e 
        * th         at is not eq       u     ivalent to         the requested typ e.
           * @exception TypeMism     atch if called on a DynAny who             se    current c       omp  onent  itself has components
        * @exceptio    n InvalidVa    l   ue if this DynAny      ha        s   c    ompon        ents but has a cu     rre nt posi    tion of -1
          *   /
  public float ge    t_float ()    throws    org.omg.   Dyn  amicAny.Dy nAnyPack  age.TypeM         ismatch, o       rg.omg.DynamicAny.DynAnyPackage.InvalidValue               
   {
      org.    omg.C       ORBA.portable.S        ervantObj  ect      $so  =      _servant _prein voke    ("g et_float", _op    sClass);    
         DynEnumOpera                   ti  ons  $self = (D  ynEn    umOperations) $so.servant;

      try {
                          retu    rn $ s    elf    .get  _floa    t ();
      } finall     y {
           _servant_p      o st      invoke ($s    o)     ;
      }
  } // ge   t_float


  /**
              * Extrac  ts the dou    ble v      a  lue from this DynAny.
                 *
           * @except           ion TypeMismatch if the acce  ssed co mpo  nent in the DynAn  y is of a        type     
        * that i s    not equivalent to t      he      requested ty          pe.
                   * @exceptio  n TypeMismatch if calle    d o   n      a Dyn    Any   whose curr  ent component itself has           components
        * @ex   ception           InvalidV  alue     if this DynAny has c    omponents       b  ut h as a current     position of - 1
        */
  public double get_   double ()      throws org.  omg.DynamicAny.DynAnyPackage.  TypeMismatch,   org.omg.DynamicAny. DynAnyPackage.InvalidValue
  {
         o  rg.      om  g.CORBA.portable.Ser  vantObject $     so        =      _s ervant_   p      rei    nvoke ("get_double", _o   psClass);
           DynEn     umOp   er     ations  $self =  (  Dy nEnumOperations) $so .ser  vant  ;

      try {  
              return     $self.get_dou  ble ();
         } finall   y {
             _servant_posti    nvok       e ($so);
           }
  }      // get_doub le


  /**
              * Ex tracts the st     ri    ng v   alue   from this  D   y     nAny.
        * Both bounded and unbounde         d strings are ex   tr    acted  u   sing    this me    t      hod.
              *   
        * @   exceptio     n TypeMism  atch if  the a  ccessed    c          omponent      in      the Dy    nAn          y i   s o     f a        type
                  * t             h   at   is not equiva   le          n     t to the r    equested type.
            *   @e xception TypeMisma    tch if called on a DynAny whose   current  co     mponent itself has components
        * @exce ption InvalidVa       lue if this             DynA  n y has compone    nts   but        has    a    cu                 rren t positio  n of -1
        */
  public String get_string (   ) throw s org.  omg. DynamicAny.DynAnyPac  k   ag     e.TypeMismatch,      org.om   g.Dy   nam    icAny.DynAnyPackage.Inv alidValu e
  {
       org.omg.CORBA.portable.Se      rvantObject $so    = _serv  ant_prein   v        oke          ("get_ str   ing", _opsClass);
      DynEnumOperations  $se  lf = (DynE     num     Operations) $so.serv ant    ;

           tr   y    {
              return $se        lf.get_s    tring ();
      } fina lly {
          _servant    _postin voke ($s     o);
      }
  } //       get    _st     ri    ng
       

  /**
                   * E    xtrac    ts the referenc     e t  o a       CORBA Object from this    D   ynAny.
               *
        * @except ion Typ eMism    atch if              the acce         ssed compone   nt in the DynAny    is of a       type
          * that is not equ  iva    lent to the re          quested   type.
               * @exception TypeM     ismatch    if cal     led on a DynA   ny whose current  component itse lf has c ompon    ent s
                 * @exception InvalidValue   if this DynAny has compo ne   nts but has a current p    o   sitio     n of -1
        *   /
  pu      bl    ic      org.omg.CORBA.Object   get_reference   () throws org.omg.Dyna micAny.DynAnyPackage   .TypeM ismatch, org.   omg.DynamicAny.Dy  nAnyPacka ge.Inval    idVal  ue
  {
        org.            omg.CORBA.porta   ble.Ser       va   ntObject $so = _serva   nt_preinvo  ke ("get_referenc e",  _opsClass);
               Dy   nEnum  Operations  $se    lf = (D       ynEnumOper           ations     ) $so.servant;

      try {
          retu        rn $self   .get_ref     erence (    );
        } f      inally {
          _servant_post     invoke ($so)    ;
       }
       } // get    _refere   nc    e


  /  **
           * Ex    tracts the TypeCo        de object from  this DynAny.
                  *   
        * @e    xcep ti o     n TypeMisma      tch if the accessed compo   ne   n  t in the DynAny is of a     type
          * that is not        eq   uivale   nt t        o the r   e     que      sted type.
        *          @ excep   ti   on TypeMismatch if cal     led on a DynAny who s    e c  urrent co    mponent itself has     components
        * @ exception Inval        idVa       lue if t  hi   s       DynA ny     has components but has a current posit       i on of           -1
        */
  publi    c org.omg  .COR     BA.      Typ    eCode ge   t_typecode  () throws org.o mg.Dy      namicAn      y.DynAnyPa  ckage.TypeM   ismatch,      org.     omg.D    yna     micAny.DynAnyPackage.InvalidValu   e
  {
          org.omg.CORBA.p  ortable   .ServantObject $so      = _serva         nt_preinvok   e (    "get_typ ecode", _opsClass);
      DynEnumO   pe  rat   ions  $    sel       f = (DynE    numOperatio n  s) $       s     o.se   rvant;

          try       {
             return $sel  f.g et_    ty   pecode ();
                  }       finall   y            {
                 _servant_po      stinvoke ($so);
      }
  } // get_typecod  e


         /**
        * Extracts the long  valu  e fr   om         thi     s  DynAny. The IDL lo   ng l  ong data type is mapp     ed  to the Java lo    n   g dat   a type.
            *
             * @except ion T  ypeMismatch if the acce   ssed component in t       he DynA   ny is of a typ   e
           * t        hat    is not eq   uival     ent   to the requested ty    pe.
        * @exception TypeMismat ch i  f c  alled on a DynAny whose cur     ren     t component itsel   f              has comp                  onents
        * @exce  ption In vali     dValue    if    this DynAny has compo     nents bu t has a cu   rren  t   position of -1
             */
  public     long g      et_l  onglong       () throws org.omg    .   D ynamicA  ny .DynAnyPackage.   TypeMi   smatch, org.omg.DynamicAny.DynAnyPackage.InvalidValu   e
  {
         org .omg.CORBA.p  o   rtab        le      .ServantObject $         so   = _servant_preinvoke ("get_longlong",    _opsClass);
      DynEnumOperations      $se     lf = (DynEnumOp  era      tions)         $so.servant;

      tr y {
         retur   n $sel f.get_  longlong ();
      } finally {
                 _servant_postinvo            ke ($so);
         }
  } // g      et_longlong

  
  /**   
                * Ext   racts the long value from this    DynAny.
          * The ID  L unsigned lo    ng l  ong data type   is mapped  to the Jav       a long dat         a type.
        *
              * @exception TypeMi            sm    atch   if the accessed co      mponent in the DynAn    y is o   f  a type
                 * that is not   equivalent to the requ  ested type.
             * @exception TypeMismatch if called on a D        ynAny wh    ose current componen  t its       elf has components
                   * @ex      cepti   on In   validValue if this DynAny             h      as componen   ts but has a cur rent po   sition of  -1
             */
  public long get_ulon    glong () throws   org.omg.DynamicAny.DynAny    P  ackage.TypeMi       smatch, or    g.omg.Dy    namicAny.DynAnyPackage.InvalidV   alue
  {
           org.om   g.CORBA.portable.Ser       vantObject   $so =    _servant_  preinvoke ("       get_ulonglong", _ops   Cla    ss);
      DynEnumOperations      $self = (DynEnumOperati   on s) $so.servant; 

           try {
         return $sel        f.get_ulonglong ();
           } finally {
               _serv ant_postinvoke ($so);
      }
    } // get_ulonglon   g

    
  /**
        * Extracts                 the  lo ng value from this Dyn   Any. Th   e   IDL wchar data t  ype i    s mapped to       the Java char data          type.
        *
             * @exce ption TypeMi  smatch if th    e accessed     component in the DynAny is of a type
                *     that is not equivalent to the requested type.
              * @exception TypeMismatch i   f called     on     a DynAny whose current compo   nent itself h       as compone   nts
               * @exception   InvalidVal  ue if this DynAny has  components but has a curren  t p osi   tio   n of    -1
                */
  public char get_wchar () throws   org.    omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.     DynAnyPackage.     I              nvalidVa lue
       {
       org.  omg.CORBA   .po   rtab  le.ServantObject $so = _servant_preinvoke ("   get_  wcha   r", _opsC   lass  );
      DynEnumOpera     tions  $self = (DynEnumOper  ati  ons)            $so.s  ervant;

      try {
         retur     n $self.get_wchar (  );
      } f    inal                ly {
                    _servan    t_postinvoke ($s   o);
      }
  } // get_wchar


  /**
            * Extracts the st    rin g value      from thi  s DynAny  .
        * Both bounde d and un bounded  strings are         ex     tracted  using this method  .
        *
        * @exception TypeMismatch if the accessed compon  en       t in th           e DynAny is    of a type
                  * that is not equivalent    to th        e requested      type.
          * @exception TypeMismatch i f  ca   lled on a DynAny whos   e    current c ompon   ent itself has       comp      onents
           */
  publ       ic St               ring get_wstring () th       rows org.omg.Dy        namicAn  y.D   ynAnyPa   ckage.TypeMisma tch, org.omg.DynamicAny.DynAnyPackage.InvalidValue
  {
      org.omg   .CORBA.  portable.ServantObject $s   o    = _servant_preinvoke     ("get_wstring", _opsClass);  
      Dy    nEnumOperat    ions  $self = (DynEnumOperations) $so.servan           t;

          try {
           return $se     lf.get_w string ();
      } finally {
          _servant_postinvoke (  $so);
         }
      } //   g et_ws     tring


  /**
        *   Ext   racts  an Any value contained i n the Any represented by this DynAny.
            *      
                  * @exception TypeMisma     tch if the accessed com  ponent in the D ynAny is of a type
        * that is not equivalent to the requested type.  
        * @exception    TypeM   ismatch if called on a DynAny whose c  urren    t     component itse lf has components
           * @exce  ption    InvalidValue if this DynAny has       c         ompon   ents b      ut has a current position   o  f -1
        */
  public    org.omg.CO R   BA.Any get_any () throws or     g.om    g.Dyna micAny.Dy nAn    yPackage.TypeMismatch, org. omg.DynamicAny.DynAnyP      acka ge.Inva     lidValue
  {
      org.omg.CORB    A.portable.ServantObject $s   o = _servant _preinvoke ("get_any",   _opsC   lass);
      DynEnumOperations  $self =    (DynEnumOperations) $so.servant;    

      tr y {   
         return $self.g   et_any ();
          } finally    {
          _servant_postinvoke ($   so);
      }
  } //           get_any


           /**
          * Extra  cts the Any   value contained   in the Any represen  ted b  y this DynAny and   ret    urns it wrapped
                   * into a new DynAn   y.      
             *
            * @exceptio   n TypeM   ismatch if the accessed component in the DynAn  y is of a       type
        * that is not equivalent to the req  uested type.
        * @excepti   on TypeMismatch if called on a DynAny whose current com  ponent itself has compone    nts
        * @exception InvalidV      alue if this DynAny   has com  pon     ents but has a current position   of -1
        */
  public org.omg.DynamicAny.D ynAny get_dyn     _any () throws org .      omg.DynamicAny. Dyn   A       nyPackage.TypeM        ismatch, org.    omg.DynamicAny.DynAny         Package.InvalidVa   lue
  {          
      org.omg.CORBA.portable.ServantO     bject $so = _serv                ant_pre     invo    ke ("get_dyn_any", _opsClass);
      DynE  nu    mOperations     $self = (DynEnumOperations) $so. ser  vant;

      try {
         return $self.get_dyn_any ();
      } finally {
          _        s e  rvant_postinvoke ($so);       
            }
  } /   / get_dyn_any


  /**
          * Extract s a Serializable object fro m this  DynAny.
        * The IDL ValueBase type is mapped t   o th     e Java Serializable type.
         *
                * @exception Type     Mismatch if the accessed component in   the DynAny       is of a type       
          *      th  at is not equivalen      t to the requested type.
        * @exception TypeMismatch  if called on a DynAny whose curren t component itself has components
        * @exception InvalidValue     if this DynAny has components but has a current p    osition of -1
               */
  public     jav   a.io.Serializable get_val ()  throws org.omg.Dynami     cAny.DynAnyPac     kage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.In  validValue
  {
      org.   omg.CORBA.portable.ServantObject $so = _servant_preinvok   e ("get_     val",     _opsClass);
        DynEnu    mOperations  $self     = (DynEnumOperations)   $so.servant;

         try    {
         return $self.get_val (   )  ;
           } finally {  
          _se   rvant_postinvoke ($so);
      }
  } // get_val


  /**
        * Set   s the current position      to index. The current         position is indexed   0 to n-1,      that is,
        *        index zero corresponds to the firs  t co   mponen t. T      he operation returns true if the     resulting
                 * c  urrent position indicates a compon ent of the DynAny and false if index indicates
        * a   position that does not correspond to a c omponen  t.
        * Calling seek with a ne  gati     ve index is legal. It      sets the c    u      rrent position       to -1 to indicate
          *    no c      omponent and return s false.         Passing a non-negative index value fo   r a DynAny that do es not
        * have a componen    t at the corresponding position sets the current position to -1 and returns false.
         */
  public boolean seek (int ind   ex)
     {  
      org.omg.CORB   A.portable.ServantObject $so = _servant_prein        voke ("seek", _opsClass);
      DynEnumOperations  $s         elf =     (DynEnumOperation       s) $so.servant;

      try {
            return $self.seek (index);
      } finally {
              _servant_postinvoke ($so);
           } 
  } // seek   


  /**
        *       Is equivalent       to seek(   0).
        */
  public void rewind ()
  {
         org.omg.CORBA.portab       le.ServantObject $so = _servant    _pr einvoke     ("rewind", _ops      Class);
      DynEnumOperations  $se  lf = (DynEnumOperations) $so.servant;

        try {
         $sel     f.rewind ();
      } finally {
          _servant_postinvoke ($so);
      }
  } // rewind


  /**      
        * Advances the current position t      o the next component.
        *  The operation returns true while the resulting current position indicates a component, false otherwise.
           * A false return value leaves the current position at -1.
        * Invoking next on a DynAny without components l      eaves the current position at -1 and returns false.
        */
  public boolean next ()
  {
      org.omg.CORBA.portable.ServantObject $so = _servant_preinvoke ("next", _opsCla      ss);
         DynEnumOperation      s  $self = (DynEnumOperations) $so.ser    vant;

      try {
         retu    rn $self.next ();
              } finall     y {
             _ser    vant_postinvoke ($so);
      }
  } // next


  /**
        * Returns the n  umber of components of a DynAny.
           * For a DynAny without components, it    returns zero.
        * The operation only counts the compo  nents at the top level.
        * For example, if comp      onent_count is invoked o  n a DynStru    ct   with a single m  ember,
        * the ret  urn   value is 1, ir  resp   ective of the type of the member.
        * <UL>
        * <LI>F     or sequences, the operation returns the current number    of elements.
        * <LI>For structures, exceptions, and value types, the operation returns the number of members.
        *    <LI>For arrays, the op  era  tion returns the number of elements.
        * <LI>For unions, the operation retu   rns 2 if      the discriminator indicates     that a named member is active,
        * otherwise, it retur    ns 1.
        * <LI>For D  ynFixe     d and DynEnum, the operation return  s zero.
        * </UL>
        */
  public int component_count ()
  {
      org.omg.CORBA.por     table.Se   rvantObject $so = _servant_preinvoke ("component_count", _opsClass);
      DynEnumOperations  $self = (DynEnumOperation  s) $so.servant;

      try {
         return $self.component_count ();
      } finally    {
          _s  ervant_postinvoke ($so);
      }
  } // component_count


  /**
        * Returns the DynAny for the componen t at the current p  osition.
            * It does not advance the      current position, so repeated calls t    o current_    component
        * without an intervening call to rewind, next, or seek return the same component.
         * The re turned DynAny object reference can be used to g et/set the value of the current component.
        * If the current component represents a   complex type, the returned reference can be narrowed
        * based on the TypeCode to get the     interfa ce corresponding to the to the  complex type.
                * Calling current_component on a DynAny that cannot have components,
        * such as a DynEnum or an empty excep       tion, raises TypeMismatch.
        * Calling curr    ent_component on a DynAny whose current position is -1 returns a nil reference.
        * The iteration operations, together with current_component, can be used
        * to dynamically compose an any value. After creating a dynamic any, such as a DynStruct,
        * current_component and next can be used to initialize all the components of the value.
        * Once the dynamic value is completely initialized, to_any create      s the corresponding any value.
        *
        * @exception TypeMismatch If called  on a DynAny that cannot have components,
        * such as a DynEnum or an empty exception
        */
  public org.omg.  DynamicAny.DynAny current_component () throws org.omg.DynamicAny.DynAnyPackag      e.TypeMismatch
  {
      org.omg.CORBA.portable.ServantObject $so = _servant_preinvoke ("current_component", _opsClass);
      DynEnumOperations  $self = (DynEnumOperations) $so.servant;

      try {
         return $self.current_component ();
      } finally {
          _servant_postinvoke ($so);
      }
  } // current_component

     // Type-specific CORBA::Object operations
  private static String[] __ids = {
       "IDL:omg.org/DynamicAny/DynEnum:1.0", 
    "IDL:omg.org/DynamicAny/DynAny:1.0"};

         public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.COR BA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DynEnumStub
