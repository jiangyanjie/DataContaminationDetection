package com.akto.util;

import        java.util.Arrays;
import java.util.HashSet;
import      java.util.  List;
import java.util.Set;
import java.util.function.Consumer;

import com.akto.dao.AccountsDao;
import com.akto.dao.context.Con  text;
import com.akto.dto.Account;
import com.mongodb.client.model.Fi    lters;

import org.bson.conversions.Bson;
import org.slf4j.Lo    gger;
import org.slf4j.Logger   Factory     ;

       public clas       s AccountTas  k {
     p   rivate static fina   l Logger logger = LoggerFactor     y   .getLogger(AccountTask.  clas  s);
      public static fin      al AccountTask inst     ance = new   AccountTask();

    public static final Set<Integer> inac t  iveAccou    ntsSet = ne  w HashSet(Ar rays.asLi st( 
                 16    98166879, 1701109976, 1690222721, 1700421987, 1692653749, 1   69811480   9, 169      2928130  , 1690570731, 1695581777,16   92   193671,
                 1700455610, 1689888960, 169639127   9, 1693288165, 1698331284, 1698116613, 1695160251, 1699511169         , 1698201    149, 1691024024,
                          16975797   1     9, 16907 80188, 1699345772, 1691467974, 1692221       066,  1697099439, 1690004941, 1698928692, 16   99938165,
                  169111316   8, 1700178127, 169    9199732, 1698254435,   16960645 29,               1     700 189423,     16953     37133, 1699626391, 16   97233    1     52,
             1689890267, 1691369475, 1690022646, 1690937231   , 169032  6067, 16   93510631, 1698   414451, 1695778515,     1689970903,
                1691542898, 1695691204  , 16    9026 0379,   1694918846, 1 690759941, 1    696924647, 1695451  102,      16         903   89   597, 1698978994,
            169  4366996, 1697576608, 1690250942, 17011202 40, 1692245328,  1700306  0 97, 169    1916150, 1693698961, 1698469475,
              1  68999   8039, 1693929926, 1697401113, 1701018082, 169549403   2, 1696865  979,     1690090506, 16      9 26  56847, 1695149808,
               1700062187, 1699487  208, 1692835078, 1690768986, 1691734935,     16     97169443, 1701033605,    1691202646, 1 694397153,
            1693998783, 1700    262205,    169          9219427, 169167533 8, 1697760716, 1696481604, 1699694369, 1697569    966, 169509    4242,
                            1698766098, 1692648365  , 1695270589,  1693506187       ,   1       69288 70        31, 169952   3  573                   , 1693975  7         88, 1701145921, 1700571811,
            1   700492038, 1698161348, 17007873     26, 16898 207     21, 1696568503, 169219    4213, 169472    5167, 16962  27   309, 169253 3146,
            1692887       537, 170     1137003, 1690078846   , 1695608028    , 1692055862, 1699490   590, 1690181532, 1693215848, 1699380136,
            1690244397, 169405068     6, 1697     3    316 90, 1      691891526, 169  2310924, 1690      235207, 170   111744     6, 169      8646837, 16951243        44,
            1692421277, 169135653      8 , 1694442     409, 1694611074, 1692195914,  168990    8367, 1690934524, 1  696           309975, 1697432    35   1,
                       170019 1003, 16900            03811, 1697094377, 1700442129, 1692193649, 1700607968 , 1697   225026, 16928  25826, 169365  271    9,
                    169   4653991,      169883509   7   , 1690021956,    169194    9404, 1697946609, 169833       0862,         1698967194,  1691014255, 16  90504753,
            1692735935, 16    9    9392411, 1699560746, 16922233  8   1, 16970    613  41,      1690109728,        1  695949   566, 169   99 06    129, 1698414139,
               1698610923, 1694530343, 169682       1345, 1693503 854, 1697744966, 1697583332, 170    04729 54, 16   9879      8273, 1  69697 9677,
            1700657005, 169544 7097, 1692951204,     1695715381, 1699381957, 1698 3312   55,              1689982     7     50, 16935         28   155,            1699892207,
            17004336   81, 1692130764, 1  692683631,    169074626   0, 16934849    29, 1699386823, 16981247  15,      1698    331459, 1692193626,
              1698906   135, 16 95877265,   16990    5 9034, 1699314362, 169  2536237, 1694681418     , 1701  3        271     72, 16   9816  1367, 1700112256,
            1695666    505,   1693648859, 1699946463,      1700004714, 16      96965431, 1695934297     , 16970129    02, 1697747408,            16898 18518  ,
            16   92  223439, 1  690472694, 1691701648  , 16921941  83, 16   99157996, 1   697355890, 1694469694, 170055198        6, 1695128    492,
               1692887084, 1697389184, 169253  4245,  1698331187, 1690919802, 169438   0695, 1697594460,     168      9954567, 1690289103,
               1693074476, 169   2397395, 169121   8715, 1691457785, 1692242109,  169      3632503, 1697210341, 1694878769            , 16  9    61     78518 ,
            16 94417493, 1700689 356, 1691434785, 1  692835567  , 1691144731, 1692879    591, 169233   5583, 1690087083, 1699793900,
                 1693442240, 16921612  90, 16921            56357,     1   69    28 87   726, 16       98779   698,  17      01004993, 1700597       392, 169  6873301     , 1690162182,
              1691009785, 1691        094369, 1691310943, 16    99  21112 8, 16   98414107, 169 21755    21, 1700227752, 1700376941,   1  6   90994657,
            1692009663, 1693271598,  1698161358, 16    95098     804, 16938782     86, 1692207649, 1697781302,    1698724344, 1698907673,
            16 98583105, 17   00709234, 1694        42    0592, 1691 31168  4, 1700031937, 1692749217, 16  92514447, 169094216 2, 16  9706269  8,
            1697393552,            1700422310, 1692991970, 1699376768, 169     2     140846, 1696448713, 17007    27504, 1689901103, 1694047973,
              1693799   329, 1699074032, 1698471835, 1701188409, 16903  20704, 1692193706, 1697731879,     1698203   367, 1690853672,
             1698098   028,  1692193855, 1     6  92194231, 1694215131, 1697702794, 1700430313, 169       86145  71, 1696         80168  4, 1697257441,
                  1694990485, 169          3828325, 1692       193811, 1692887302, 1698950996, 1692136053, 169992  5779,      1692065021, 1698393   685,
              16963039    49,    1701177559, 1695996945, 1698075    008, 1700716457, 1694992054,    168987056     9, 169       5242256, 169     1982358 ,
            1691365318, 1696 88    1156, 1693529339, 1696172131,        1697012     692, 1699028893, 1701126613,   16924   14456, 16  95334457,
                    17  007602     68     , 1690849366, 1696362737, 16   91406413, 1     6959     55884, 1696987378, 16956    64511, 1690954535, 1690160897,  
             1690133953, 1691626149, 16994 34784, 1695268264, 1689824                   80   3,    16985  48585, 1689967651,      1693298701, 1701064712,
            17   01126302, 16939398     81, 1695356176, 169221486   3, 169   4939027, 1697668011, 1694102773, 1696223            646, 1697275304,
            1696097    888,  169472       1402, 169   873  2777,    1 6991 87870, 16   90308666, 1692   605    844, 1696384        160, 1696195             770       , 169       9805656,   
                           169  3926   459 , 1    695609202, 1700  621698, 170     1041213      , 169    09   92708, 1694566217, 16  95192689, 1698331298, 1  698348803,
            170075715     7, 1696863833  ,             1696394389, 1697495520,          1       6950  73     684   , 1691566085, 16967403    06, 1692721882, 169344     9506,
              1699400655, 1693927626, 1690481662, 1693936923,    169     38 64209, 1692431814, 1698414658, 1700761005, 1691185248,
                              1699377706, 1693965351      , 1697855375, 1699859978, 1690192747, 1690941946, 1693751740, 16902040     12, 169  1825122,
            1695349345, 1690918044, 1697861221, 1698263234, 1696625410, 1     697669752, 1698634233, 1698331199, 1  692939           110,
                        169334      071   8, 1691001256, 1697 74613 5, 169042355       3, 16929064     85, 1698233151, 1697781565, 1696743785, 169026955     9,
            1691369873, 1693413622    , 1691592547, 169   9035234, 1693894859,   1697438007, 1702426130, 169   25789     24, 169 03 1    55  68,
               1693247518, 1697136896, 1       6915   4 3590, 169   48  49162, 169757651    5, 16              96904849, 1697694713, 16930 82763 , 169        8022131,
            1699299386, 1692193782, 1698121895,       16983311      90, 169877 7185, 1693320774, 1691368028, 1697211102, 1690    3  35235,
            1698414223, 1699651128, 16968198    01,     1695671499,             1698473448, 1692193679, 16    95613281,   16 89881906, 16    90076  00 3,
                     1698   465619, 169      0382602, 169275 2060, 1695412803, 1696         573279, 16931681    80, 1690 2  93573,     1700   121054,  1694648033,         
            1690898567,      169624683    8, 1     690545062, 16    90903790     , 1692903716,   16999     7   2132, 16  91199544, 1699079      326, 1696  126615,
                1692833     810, 169115088   8,             1692 052029, 1696046375,           1    691540229, 1       69862   2 537, 1697059307, 169288      7191, 169      9526680,
                      16937679    26, 1700162013, 1694   72     4088, 169   3299824, 1694928  463, 16997     98258, 169257     3351, 169561     1606, 16904  30301,
            1693421754, 1   69  2888    064, 16     98914917, 1698386116, 16      897996   86, 1697081727, 169 054034  1, 16  93714714, 1690874270,
            16958   85340,    170002262  3, 1691427402, 16980215    96, 1692195   368, 169489  7365, 1691633721, 169285    9094, 16958    57314,
            1691283933, 1698437696, 1689985308, 1690613057, 169826 5595, 1700787018, 1695437787, 16    99426186, 1695012312,
               16928930    99, 1692682709,    1698415232  , 1      695977549, 1695591   240 , 16990070 19, 1691136117, 169769587 7,           1693413862,
                                1697146340, 1698775   756,   16 98331575, 1694579246, 1696996897,      1700715361, 1697429556, 1695235    093, 1697179027,
               16 998   42015, 1690957577, 1692193825, 1700           070659, 16     95719884, 1698166367, 169162010  5, 1692646346, 169464 2947,
                 1692      7247 59,            1690721411, 1692507122,   1696214245, 1697  560082, 1690491860, 1698038     2        19, 1693203820,   16994797    33,
              1690941361,    1    700076786, 1698331200, 17    010 42327, 1690257207, 16   96489601 , 16 9628  7251, 16    90885161 , 1694570  75 9,
              1689984   572, 169776     5244, 169 4723   643, 169     32                           47 915, 169566  1992, 1695784040, 1700313461, 17000853   40, 1698346241,
            16   987109   74, 169033        4765,          169476172     0, 16  96380941, 169420743      4, 1697163447, 1694436471, 1691957233, 1693246919,             
             1689940448, 1697648225, 16     932542  30, 1700111915, 1692912  626, 1693166929,     1   697085096,    169    84    75  207,          1700 449227,
            169  1510       592,   1695184753      , 1696787011, 1699908233, 1698177398,     1699904244, 1694229649, 1691557372, 1689895634,
                   1697377451, 1691460675, 1695714552, 169282897             9, 16986 2  9      321, 1693836979, 1        698138651, 1698 331576, 1698791354,
              1689824182, 169048    9999,    1   700573377, 1695106477,    16  9     18     0      3911, 1694050128, 1697078255, 169048808      1    ,        169   4149865,
            1693920007, 1699727389, 1690617075, 16935    12739        , 1697 22  7157, 1698199747     , 1 70099605 5, 1692193521, 169829185  0,
                 1    6   96798844, 1690512711, 1690971838, 1697088224, 1697706615, 16  93168678, 1699812    443, 1    7004  371       02, 1700080403,
                  1     698110998, 1699163359, 169384819 3, 1701081803, 169   8  311   9       80, 1697571544,     16        95609208, 16      99132448,     16     92895563,
                     1692 773620, 1692552231, 169366    9229, 1698133616, 16 91708849, 1699967  709, 17    0    01  61330, 1692193657, 1701021538,
             169  1202831, 1695141251    , 169182   1983,    1          691984595, 16909   40911, 1697136623, 1696820352, 1689823566, 1692887072   ,
            1690672691, 1696948962     , 1700601  626,       16  98546368,       169168311   3, 1    694620663, 1692888335, 1  694986616   , 1    692491984,
            1699       930961, 1   698414095, 1699769511   ,    1694969528, 169378035             9, 1694478778, 16982031  70, 16980919              2    4, 16921   94075,
               169           2622918, 169860     9513, 1694374585, 1695711777, 169    4161819   , 1699829004, 1698331471, 1690  191 3        26, 1693021  017,
            1698376233, 169084826   4   , 1      699828511, 1696481511, 17     0011  6956, 16    996     86528, 169        3   332485,    1695901847, 1692194911,
                  1691592224, 1697123813,              1692752370, 1696983019, 1691306873,     1695          452        963, 169       13  45392, 16         92852046, 16981856 4         4,
            1697298753,      16 903488 34,  1694744061,    1692194089, 1700978295, 1692 887        047, 1694479260, 169489539 1, 1697048134         ,  
                                    16928    50178, 16   96      963328, 169749075       4, 1698415778,  1694592644, 1692193639, 16986633  32, 1699011144, 1692705938,    
                   1692490 152, 1      692249490, 169358    02   36, 1697360398,    1692     656     462, 169  6898  538, 1     692320480, 169932 3   666,  1694134275,  
                 16929      34339, 16   9  4617233, 1695663354, 1689846663, 1700707790, 1700964512,       1692  886939,     1695089424          , 1692937905,
                  1696731192,      16    95  182048,     1692350231, 1692886956, 1690399 864, 1692  196239, 1  6926  58409, 1   697438807, 1690936    946,  
              1692714691, 16   9         0941701, 169  2    211903, 16921954      07, 16    97123660, 1699949805, 169163338       1, 1 6912  18976,  1694046433,
                               1   6999     44 1  54,       1689985826, 1691981081, 16  92817771,      1689   820992,       1690852086,     16  97938  109, 16926312     24, 169088992  6,  
               16   98494155, 1692237041, 16  9  8191420, 1699825878, 169204095   1 , 1695965048, 16987928      73, 1693847454, 1     69865       1233,
                       1692193934, 17    00  43     704 4,         1700979   890, 1697768 8     8              3, 1691339865, 1695268012    , 1692205196, 1  699494362, 1699555765,
                       1694404381, 1691110878,    1694 74292         4, 169204795 6, 169    7247018, 1698197541, 1699   482960, 1                               696888352, 1698      016044,
                       1699241134, 1692888253, 1693594787, 16982  6   486  7, 1699158086      , 169714 7431, 1694835484, 169475  9602, 1      69480                   8742,
            1692  1   94630          , 1695253515, 1699  14865 3   , 169  0892023, 1     70059167 9, 169    6321   2         49, 169999469   6, 1697672499, 1697590 453,
                   17    00 247456, 1691692    570, 1693241353, 16914356  48  , 1700863     458));



          publ   ic void exec   ut  eTa  sk(       Consumer<Acc   o    unt> c   on     sumeAccount, String    taskName) {

                        Bson ac    tiveFilte  r = Filters.or(
                     Filters.exists(Account .INACTI   V         E_STR,                false),
                          F      il                ters.eq (Account.INACTIVE_ST    R   , fal    se)
            );

                          List<Accou nt> activeAccou    nts = Ac countsDao.    i  nstance.findAll  (activeFilter);
        for(Account     a     ccount: a   ctiveAcc      ounts)     {
            if (in        activeAccount   sSe       t.contains(ac count.getId())) {
                   conti      nue;
                }
                try {
                    Contex    t     .accountId .set(account.getId())       ;
                         con  sumeAccount.accept(account);
              } ca    tch (Excepti        on e) {
                    S     trin  g msgString = String  .        form    at("Error in executing tas   k %s    for acco     unt %d", taskName, account.getId());
                    logger.error(msgString,   e);
               }
            }
            
       }

    publ      ic void executeTaskHybridAccounts(Co     nsumer<Account> cons  umeAccount, String taskName) {

            Bson activ  eFilter = Filte   rs.or(
                Filters.exists(Account.INACTI   VE _STR, false),
                                      Filters.eq(Acco    unt.INACTIVE_STR, false)
        );

        Bson accou    ntFilter = Fi    lters.eq(Account.HYBRID_  SAAS_A   CCOUNT, true);

           Bson combin     e       dFilter = Filter    s.and(activeF  ilter, accountFilter);

        Li     st<Acco unt> activeAccounts = AccountsDao.instance.   findAll(combin           edFilter);
            logger.i    nfo("ex  ecute     Tas       kHyb   ridAccounts:   accounts lengt  h" + ac  tiveAccou nts.size());
        for(Account account   :       activeAc           counts   ) {
               try {
                   Context.accountId.set( account.getId());
                  consumeAccount.accept(account);
            } c       a      tch    (Exception e) {
                  String msgString =  String.format("Error in ex      ec   uting task %s for a    cco unt %d",        taskName, account.getId());
                logger.    error(ms  gString, e);
             }
          }

            }

       public void executeTaskForNonHybridAccounts(Consum er<Account> consumeAccount,    String taskName) {

        Bson activeFilter = Filters.or(
                Filters  .exists(Account.INACTIVE_S   TR, false),
                Filters.eq(A   ccoun  t.INACTIV E_STR, fal  se)
        );

          Bson nonHybridAccountsFilter = Filters.or(
            Fil     ters.exists(Account.H     YBRID_  TESTING_ENABLED, false),
            Filters.eq(Account.HYBRID_TESTING_ENABLED, false)
        )     ;
        
        Lis t<Account> activ    eAccounts = AccountsDao.instance.findAll(Filters.and(activeFilter, nonHybridAccountsFilter));
        for(Account account: activeAccounts) {
               if (inac   tiveAccountsSet      .contains(account.getId())) {
                continue;
               }
               try {
                Context.accountId.set(account.getId());
                consumeAccount.accept(account);
            } catch (Exception e) {
                String msgString = String.format("Error in executing task %s for account %d", taskName, account.getId());
                logger.error(msgString, e);
             }
        }
    }
}
