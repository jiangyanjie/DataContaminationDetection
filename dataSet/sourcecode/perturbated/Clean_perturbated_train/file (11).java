package  org.omg.DynamicAny;


/**
*   org/omg/DynamicAny/_DynSequenceStub.java .
*    Generated by the  IDL-to-Java  compile  r (portable), version "3.   2"
* from c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u131/8869/corba/src/share/classes/org/omg/DynamicAny/DynamicAny.idl
* Wednesday, March 15, 201   7 1:2  5:04      AM PDT 
*/  


/**     
    *    DynSequence objects support the m    a   nipu    lation of IDL sequences      .
    */
public class _DynSequenceStub extends     org.omg.CORBA.portable.ObjectIm   pl implements      o  rg.omg.DynamicAny.DynSe  quence
{
  final    pub   lic static java    .l  ang.Class _opsClass        = DynSequenceOperat   ion   s .clas  s;



  /**
               *       Retur   n      s the current length     o  f the      sequence.
        */
      publi   c int get_length ()
  {
      org.o   mg.  CORBA.p     ortable.   ServantObject $so = _servant_preinvoke  ("ge     t_len gth", _opsClas  s);
         D  ynSequenceOperations  $self = (Dyn SequenceOperatio      ns) $       so        .   servant;        

      try {
          return $self.get_length ()   ;   
      }    fin   ally {
          _se    rvant_postin              voke  ($so);
      }
        } // ge               t_   length


  /**   
              *   Sets the      l    ength of the sequence.
        * I     ncreasing      the len    gth of a sequence adds   new elements a t the tail without affecting t   he value  s  
                                        *         of already existing    e     lements          . Newly added elem  ents are defa      ult-initialized.
                   * In creasing the length o     f     a sequence sets t he c       urrent po  sition to the first n       ewly-a  dde     d element
         * if t    he previo  us curr en       t position wa         s -1. Otherwis e, if the previous current        positi     on    w    a   s no   t -1,
         * t     he    cu  rrent        pos      i   t   ion i   s          no       t affected.
                        * Decre    asing the length o   f a seque    nce remo       ves elements           f    rom the    tail     without af    fecting th        e va  lue
        *      of those elem       en        ts   tha        t rema      in. The ne  w current positi  on   af  ter        decreasing   the le   ngth of a s   equence
                *  is       determin  ed      as follows     :
         *            <UL>  
        * <L    I>If the  length of the             sequ     ence is   set to zero, the current   position is set to -1.
           *         <LI>If the cu rrent p   osition is -1 before        decr     eas      ing t        he len      gth, it        rem       ains at      -1.
           * <LI>If the current position indi  cates a vali   d    e   lement and that ele                      me  nt i  s not removed w   hen the le    ngth
              *               is decreased, the cur        re nt   position r   emain       s         unaffected.
             * <LI>I           f the cur  rent position  ind     ica tes a valid element  and that el   ement is removed,
        *        the cu rren t po    sition    is set to -1.
            * </UL          >
             *
                   * @exception I   nvalidValue i             f thi   s is a bounded         sequence and       len i      s larger than th  e b   ou    n    d
        */
    public vo     id set_length (int len) t               hrows org.omg.DynamicAny .DynAnyPackage.In    va      lidVal     ue
  {
           org.omg.CORBA.portable.ServantO        bject $so = _s   erva    nt_prei   n   v oke ("set_length",   _opsCla      ss);
      DynSequenceOperation s  $se lf = (  DynSequenceOperation   s) $so.serv   ant; 

        tr     y {   
             $s e    lf.set    _length (len );
          } finally {
                     _serva         nt_pos   tinvoke     ($so);
       }
  } // set_length

  
  /**
                 * Returns      the elements of th  e se   quence.
        */
  publi      c org.omg.C  ORBA   .An   y[]      get_  elem       ents ()
  {
      org.om g.CORBA.p ortable.S       ervantObject $so = _servant_preinvoke ("  ge    t_elements", _opsClas  s) ;
          DynSequenceOperatio          ns  $self =    (DynS   equenceOperations) $so.se            rvant;

           try          {
             return   $self.g   e    t_elements           ();
       } finally     {
                  _  servant_po      stin  voke ($so    );
      }
  } // get_ele   ments


        /**
                 * Sets the elements of a sequence   .
            * The length of the DynSeq uence i  s set   to       the length of value   .     The c     urrent position is se       t to z ero
         * if    value has non-zero length   and  to      -   1 if value is a zero     -l   eng    th seque   nce.
        *
        * @exception TypeMi  sm                        atch if value c    ontai   ns one or more el      emen  ts whose     Type    Co   de    is   not e quivalen                 t
          *             to the e     l   ement TypeCode    of   t    he DynS    equence
        *    @     exception InvalidVa  lue if the   length     of val  ue exceeds the    bound of a  bounded seq   uence
        */
  publ        ic void s   et_      elements (org.omg.CORBA.Any[] val     ue) th   rows     org.omg.Dyna      micAny.DynA  ny   Pac            kage.TypeMismatch,    org.omg.Dynamic   Any.DynAnyPack   age.InvalidVa      lue 
  {
         or                  g.omg.CO   RBA.portable.ServantObj ect $so = _servant_prein  voke     ("set_elements", _opsClass);
      Dyn  Sequ  ence  Operations  $self = (DynSeque    nceOperations    ) $s       o.s       ervant;

         try {
                $se  lf.set        _elem        e      nt   s (valu      e);
      } finally {
                             _servant_p ost   i      nvoke ($so);
      }
  } // set    _element    s


  /**
        * Returns the DynAny    s re pr     esenting the e      lements of the sequence.
        */
  public org.omg.D   ynamic     Any      .DynAny[] ge   t_element  s_as_dyn_an       y     ()
      {
          o   rg.omg.CORBA   .portable.Serva    n     tObjec  t $so = _servant_preinvoke ("g et_e    lements_as_dyn_any", _opsClass);
                  Dy  nSequen     ceOperations  $   self = (DynSequenceOperations) $so.servant;

                   try {
            return $self.get_elem  ents_as_dyn_any ();
      } f   inally {
          _servant_post    inv ok   e ($so);
           }
  } //    get    _ele   ments_as_dyn_any


  /* *
            * Sets      the element s of a    sequence usin   g Dy     nAnys.
          * The length      of the Dy     nS    equen    c  e is set to the len    gth of v  alue. The   current p osit  ion is set to zero
         *     if value has                  non -zer    o length and to   -1 if       value  i   s     a zer       o-length seq  uence.
              *
        * @exception    TypeMismatch if value contains one or more ele    ments    whose TypeC   o   de is not eq uivale            nt
        *              to the element TypeCode   of the D  ynSequence              
           * @ex    ception InvalidValue if the length of     value ex   c     e   e ds the bound of a boun      ded sequence
               */
         publ ic vo      id set_elements_as_dyn_an   y       (org.omg.DynamicAny  .DynAny [] value) throws org.omg    .D      ynamicAny.DynAny        Packag  e.TypeMismatch, o    rg.omg.Dy            namicAny.       D   ynAnyPac kag     e    .Inva lidValu e
  {
          org.omg.C  ORBA.p  o   rtabl     e.Serv antObject $so = _servant_  preinvoke                ("s   et_elements_a     s_dyn_any",         _opsClass);
                   DynSeque    nceOperation   s       $    s   elf = (  Dyn   S          equenceOperati  o ns) $so.se    rva  nt;

      try {
         $self.se t_elements_as_  dyn_any (value);
        }     fin    al       ly {
                       _se r    vant_     po    st  invoke ($so);
      }
  } // s     et_elements_as_dyn_any


              /**
                     * Re turns     the TypeCode ass       oc       iated with this D  yn Any object.
          *     A DynAny o    bject   is created with    a            TypeCode value      assign   ed to it. 
                    *    This   Typ        eCode val   ue determines       the type of the va lue handled   through t  he Dy  nAny object.
             * N     ote   that    the Typ   eCode associated wit   h    a Dy   nAny ob     j     ect is in    itialized at the time the
        * DynAny is                created and cannot be            ch   a  nged during             l      ife time of the Dy nAny object.
        *
            * @return Th     e TypeCod e as   sociated w     ith thi  s DynAny object
                */
  public org. om  g.CORBA.TypeCode type ()
  { 
      org.omg.CORBA.portab  l   e.Servan                    tObject $so = _ser vant_   pr      einvoke ("ty   pe", _ops C                lass);
            DynSeque   nc  eOperati ons        $self = (DynSe       quenceOperat ions) $s   o.servan     t;

         try {
           retur n $self.    ty    pe ()  ;
         }   finally {
          _se     rva  nt_   po    stinvoke ($so);     
      }
  } /  / type


  /   **
                  * I nitial izes t      he va     lue a   ssocia ted    wit   h a   DynAny object     with t   he v   alue
              * associat   ed with anoth        er DynAny    object.
             * Th e   current position of the ta   rget DynA    ny       i          s set    to zero for    val   ues th a t have components
                          * and to -1 for   values that do not have   compon    en   ts.
         *
             * @para        m dyn   _any 
        * @except  ion TypeMismatch i  f      the ty pe of the passed DynA ny is not equ ivalent to the type of tar    ge       t      Dy  nAny    
        */
  p  ublic void assign  (or  g.omg.DynamicAny.DynAny d  yn_an      y) throws org.omg      .Dynam icAny.D    y           nAnyPac kage.TypeMismatch
  {
              or  g.o     mg.CORBA.portable.Serv               antObj        e     ct $s     o = _serv          ant     _pr   einvoke   ("as   sign", _opsCl      ass)   ;
      DynSequ  enceOperations  $self = (DynSequen      ceOperations)          $so.servant;

      t  ry {
              $self.assign (dyn   _             any);
      } finally             {
            _     servant_pos            tinvoke ($so );
               }     
   } //  ass ign


  /**
              *      Initi      al      izes the       value asso  ciated     with a      DynAny     o   bj ect with the value contained in an any.
               * Th  e curren  t positi      on of the target Dyn    A   ny     is se    t t         o zero f     or va   lu  es that have    components
                 * and to -1    for valu        es tha  t do not ha  ve components.
        *
        * @exception TypeMism    atch if the type of the     passe   d Any is         not e         quiv  alent to the type of target D     ynAny
           * @exc  eption Invali   dValue if t  h   e passed Any does not contain a legal value (such a   s a null    string)
        */
  pub lic void from_any     (org.omg.      CORBA  .A    ny          value    ) throws   org  .omg.  Dyna    micAny.DynAny      Pack    age.TypeMisma  t  ch     , o rg.omg.Dyna micAny   .D     ynAny Pa c  ka  ge.Invali d Val  u      e
          {
                        org.om  g.CORBA.p ortable.Ser    vant     Object     $so = _s ervant_p   rei  nvoke ("from_any",   _opsClass          );    
      Dy   nSequenceOperation    s  $self =    (DynSeque   n ceOperati   ons)     $so.se    rva nt;

      try {
           $self.from_any (value);
               } fina lly {
          _servant_postinvoke (        $so);    
      }
  } // from  _any


      / **
              * Creates an       any value     from a Dyn                     Any           object.
            * A c opy of the TypeCode a    ss     oci   ated with the DynA   ny object i s   assign  ed to the resul         ting any.
          *    T      he value associated   with the Dy       n     Any object is copied    into t    h   e a   ny           .
             *
           * @return a new Any object wi         th the s   ame value and TypeCode
        */
  pu  blic org.omg.CO   RBA  .A    ny   to      _  any ()
  {
          org.o    mg.C      ORB    A.por       table.S        ervantObject            $so = _servant_preinvoke ("to_any", _op s  Cla           s     s);
                 D   ynSequenceOp           erations  $se l  f =      (DynSeque    nceOpera      tions)  $  so.servant;

      try {
                         return $self.to_any ();
            } finally {
                              _servant_postinvoke  ($so);
              }
  }  // to_a   ny


  /**
           *    C  omp ares          two Dyn    Any value      s    fo    r equality  .
                      * Two DynAny va  lues     are    equal    if their TypeCodes are equiv     alent  and, recursively  , all component DynAnys
             * have     equal values.        
        * The curr   ent p    osition of the two    DynAnys being    compared has no effect on the re   s     ult of equal.
                           *
            * @ret     urn true of    the Dyn   Anys     are equal, fals     e otherwise
                      */
    public   bool   ean              eq   ual (org.  om      g.DynamicAny.DynAny dyn_any)
  {
      org.omg.  CORBA.  por     table.Serv  an   tObje      ct $so =    _servant_prein     v         oke ("equal", _ops     Cla    ss);
                               Dy  nSequenceOperations   $self = (  Dyn  SequenceOperations) $s  o.servan  t    ;

      try {
         ret urn $self.e       qual     (dyn_  any);
      } finally           {
                    _  servant_post  invoke ($so);
              }   
  }    /          / equal


  /**
          *    Destro ys a D    ynAny obje             ct.
        * This         oper   a  ti        on       f rees any resources u   sed     to re    prese     nt the data value assoc iated with a DynAny object.
                                  * It  must       be i  nvoked on references o    btained from one of th   e c reation        operat   ions             o  n the   ORB    interfac    e
          * or on   a    ref   erence r    e  tur        ned by             DynAny.cop               y() t       o avoid r    esource leaks. 
               * Invok ing destroy    on component DynAny        objects (for ex  a     mpl  e, on ob jects returned     b        y the
             * current_componen  t operation) does nothing.
               * Destru ct  ion of a Dyn   Any       object implies des        tr  uction    o f all DynAny objec  ts obtained from it.
        * That is, refer    ences             to components of a    de   str   oyed Dy     nAny bec      o me in    valid.
           * Invocations on such references raise       O  BJ  ECT_NOT_EXIST.
        * It is    po        ssible to manipul          at e a component o    f a DynAny be      yon  d t he life time of the DynAny
            * from which the component     was       obta   ined by maki    ng a co     py of th e c            omponent with the    copy ope      r       ation
        *         bef    ore     d         es  troyin    g the DynAny fro   m which   the co  mp one nt was obtai     ned.
        */
  public void destroy ()
  {
      org.omg.       CO   RBA.portable.     Serv   ant    Object          $so = _servant_prei nvoke              ("destr  oy",     _o    psClass);
      Dy    nSe    quenceOperations      $self               = (DynSe          quenceOperations) $so.servant;   
 
      try {
               $self.destroy    ();
      } finally {
                   _s      ervant_postinvoke                         ($so);
          }
  } // destroy


  /     *   *
         * Creates a new Dy    nAny object whose value is a de   e p   cop  y     of the DynAny on which      it is invoked.
                * The operat  ion is polym      orph ic, that is, invoking it on one of the types derived from        D ynAny,
        * such as     Dy     nS tr   uc  t, creates t     he derived type but retur n     s i    ts r   eference as the D  ynAny base           t  ype.
          *
           * @return a deep copy of t  he DynAny object
        */
  public org.  omg.Dy    namicAny.D    ynAny     copy ()
             {
      org.    omg. C                    O RBA.port      able.Serv  antObject $so = _servant_prein voke ("copy", _    op   sCla  ss);
      Dy  nSe quenceO      p           era   tio             ns  $self         = (DynSe   quenceO  perations) $so.serva   nt;

      tr    y {
              return $s        elf.c   opy ();   
         } finally {
          _servant_p  ostinv   o ke  ($    so)    ;
         }
  } //            co py


  /**
                 *     Inserts a bo    olean value int   o t he DynAny. 
          *
            * @exception Inv    alidValue if this DynAny has components but has  a cur  rent posi    tion of -  1
        *    @ex  ception TypeMismatch if calle              d     on      a Dy      nAny w    hos    e cur         rent component itse     lf has comp  onents
        */
  public void ins    ert_bo   olean (boolean value) throws org .omg.DynamicAn        y.Dyn AnyP   ackage.TypeMisma      tch, o        rg.omg.DynamicAny.DynA  nyPa  ckage.InvalidVal       ue
  {
           org.omg.C  ORBA.por    table       .ServantO    b    j  ec   t $so = _servant_preinv  o   ke (      "insert_boolean", _opsClass);
              DynS  equenceOp     erations  $     s    elf =   (DynSe     que   nceOperations)     $so.servant;

      try       {
                  $self.i   nser     t _boolea  n (va  lue);     
         } fi   nally {
          _se         rva nt_postinv oke ($so)     ;
                 }
  } // i    nser t_boolea    n


  /**    
        * Inse  rts a byte value  into the DynA  ny. The IDL oct  et data       type is mapped t   o t   h     e Java    byte data type.    
        *
             * @exception InvalidVal ue if this Dy   n   Any has component           s but              has a current         position of -1
        *    @exception TypeMismatch if c  alled on a DynAny who          se curr  ent component its    elf has componen  ts
             */
      public void  insert_o  ct    et (byte value) thro   ws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, o     rg.o  mg.DynamicAn      y.DynAnyPackage.Invali     dValue
  {
       org.omg.CORBA.porta    ble.S  ervantO  bject $so = _ser   vant_prei   nvok        e ("inse        rt_octet",  _opsClass        );
                    DynSequenceOpera     tio ns  $self = (Dyn    Sequenc  eOperations) $so.servant;

                     try     {
         $se  lf.     inse     rt_ octet    (value);        
      } fi na lly { 
                 _servant_postinvoke     ($so);
      }
  } //  insert  _octet


  /*  *
        * Inserts a         ch     ar value  i           nto      th    e    D         ynAny.
        *
                    * @excep   tio    n        InvalidValue i  f this        D    ynAny has components but h    as a current po       sitio  n o   f -1
        * @exception T    ypeMismatch if called on a DynAny who    se c     u     rrent component i tself has componen    ts
             */
  pu  blic void inser t_char        (char value) throws org.omg.D    ynami  c    Any.DynA nyPack     age.TypeMismatch    , o    rg.omg.DynamicAny.DynAnyPackag   e.  Inval   idVa   lue
  {
          org.omg.CORBA.porta ble.Serv   ant         O        bje      ct $so      =     _servant_  p re  invoke ("  ins     e     r t_char", _         ops             Class);
      DynSequenceOp  erations  $ self = (DynSequenceOpe  rations) $so.servan t;      

         try {
              $self. insert_c ha    r (value     );
      } finally {
               _serva    nt_postinvo   k   e ($so);
         }
  } //    ins  ert_char
   

     /**    
        *    Inserts a sh       or    t va    lue into     the DynAny.
            *
        * @exception InvalidValue if     this DynA ny h     as    components but ha    s a     current position   of      -1
        * @exception TypeM  ismatch if called on a Dyn  An           y whose     curren   t   compon   ent its   elf has compon   ents
        */   
  pub    lic void ins         er t_short (sh    ort  valu  e) th        rows org.omg.DynamicAny.D  y    nAn                   yPac          kag           e.TypeMis   match   , org.omg.DynamicA         ny.DynAnyPackage.InvalidV    al     ue
                {
      org.o    mg.CORBA.  po  rtabl    e.ServantO     b  ject $so  = _servant_preinvoke ("inse         rt_s          ho  rt", _opsCl      ass);
      DynS equenceO perations  $ self  = (DynSequenceOperations) $so.ser  v   ant;

      try {
         $s  e    lf.   insert_short (value);    
      } f        inally {
          _se    r vant_postinvoke ($so);
             }
  } // insert_short


     /**
        * Inserts a   short value into the Dyn    Any.          The IDL ush      or t data type is  mapped to the Java short      data type.
            *
            * @exc   eption Inv  alidValue if t    his Dy  nA  ny has comp      one   nts b   ut h      as a c       u     rr  ent positio   n  of     -1
        * @except ion TypeMismatch if calle         d on a       DynA   ny w hose curr     ent component i         tself       has comp      onents
            */
                publ    ic vo       id insert_ush     ort (short    value)     throws     org.omg.DynamicA  ny  .DynAnyPac  ka     ge.TypeMismatch   , o   rg.omg.DynamicAny.DynAny   Package   .InvalidValue
       {
      org.omg.CORBA.p   orta   ble.ServantOb  j    ect $  so = _servant   _preinvoke ("insert_ushort",    _opsClass);
              DynSequenceOperations         $sel  f    = (DynSequenceOperations) $so.   serva   nt;

      try {
         $self.insert_ushor  t (val  ue);
                         } finall      y {
          _ser       vant_postinvoke (    $so);
        }
      } /    / insert_ushort


   /**
            * In       serts an       inte    ge       r value i        nto the DynAny. The ID  L long        da      ta type   is mapped t o the Java int data ty  pe.
        *
             * @excepti        on       InvalidValue   if  this DynAny    has comp     onents but ha      s a curre       nt posi          tion of    -1
        * @e    xcepti on TypeMisma   tch   if  cal    l               ed o         n a DynAny whose cu rren  t co mponent itself has components  
            *       /
  public void insert   _lo  ng    (    i    nt value) throws       org.omg.      Dyna     micAny. DynAnyPack      ag     e.      T     ypeMismatch, or    g.omg.DynamicAn   y.    DynAnyPackage.InvalidVa  lue
    {
      org.omg.C   ORBA.porta    ble.Serv     antOb     jec    t $so =      _servant_pr  einvoke ("insert _long", _opsC  lass);
      DynSequenceOperations  $self =  (DynSequence       Operatio   ns) $so.  s  ervant;

        try {
         $self.insert_long (value);
        } finally {
            _s         ervant_postinvoke ($so);
      }
  }     // i   n  sert_long


  /**
               * Inserts an integer value     into the  DynA  ny . The IDL ul ong   data typ  e is ma   pped to the Java  int dat   a    type.
        *
        * @exception Invali   dValue if   this Dyn    Any         has     comp  o              nents but ha    s a   current positio  n         of -1
             * @exception TypeMis    match if    called on a DynAny whose current co     mponen t  itse   lf has c  om         ponents     
           */
  public       void in        sert_ulong (int value) thro         ws      org.omg.DynamicAny.DynAnyPackage.Ty peMi   smat     ch, org     .omg.Dynami     cAny.DynAnyPackag  e.Inval    idVal   ue
   {
         org.omg.  CORBA.por    t     able.S  ervantObject   $so = _serva  nt_preinvoke ("insert_ulo   ng",    _opsClass);
      DynSe     quenc    eOperations  $se lf =  (DynSequenceO   p  erat      ions) $so.servan      t   ;

      try {
           $  self.in   sert_ulong (value);
                }         fin    ally {
                  _             servant_post      invoke ($so);
      }
  } // in   sert_ulong


     /**
        *         Insert   s a  float value into the DynAn y.
           *
         * @exception In      validV   alue if thi s D      ynAny ha  s     com   ponents but has a current posi  tion of -1
          * @e    xception TypeM   ismatch if ca    lled o n a DynAn   y wh    ose c      urrent component       itself has components
        *     /
  public    void in    sert_float (flo     at va       lue) throws org  .omg.D           ynamicAny.Dyn   AnyPackage.TypeMi smatch, org.omg.Dynam   icAny.DynA      nyPackage.InvalidValue
  {
      org.omg.CORBA.po      rtable.Ser  v     antOb  ject $so  = _servant_prei    nvo                ke ("insert_float", _ ops       Class);
        DynSeque  nceOperations  $ se  lf = (Dyn  Seq   uenceOpe rations) $   so.servant;

      try {
                 $s   elf.insert_float     (val       ue);
                } fin  ally  {
                   _servant_post   invoke ($so);
       }
  }         // inser    t_float


  /**
        * Inserts  a double value   into the Dy n     Any.
               *
           * @except           ion Inv  alidValue i    f    this DynAny has co  mponents but    has a current position of -1
                  * @exce   ptio     n TypeMismatch if        called on a D    ynAny         whose current component      itsel     f has components
        */
  public void i      nsert_double (doubl      e value) throws org.omg.       DynamicAny.Dy       nAnyPac    kage.         TypeMisma    tch, org       .omg.Dyna   micAny.DynAnyPack   age.In valid     Value
        {
         org.omg.CORBA.portable.Ser  van  tObject $s   o      = _servant_preinvoke (    "in   sert_ double", _opsClass);
        D y           nSequenceOper     atio       ns  $self = (DynSequenceOpe        rations) $so.servant;   

      try  {
               $s  elf.insert_double (value);
      } f         i nally {
             _servant_   po  sti     nvoke ($so);
               }
  } // insert_double


  /**
                      *    Ins e rts a string  value into the DynAn       y.
        * Both bounded  and unbounded str    in      gs   are in         serted using this method.
        *
                      * @exce    ption        Inva  lidValue if this DynAny has components    but has     a current position of -1
             * @exce     ption Invali   dValue if     th  e string inserted i  s longe       r t    han the bound of a bou     nded string
        * @exceptio    n Ty    peMismatch if  called on         a DynAn y w    hose     current compo      nent itself h         as components
        */
  public void in     sert_string (String    value) throws org     .omg.Dyn   a    micA  ny.D     ynAnyPacka   g    e.Ty peMismatch,    org .omg.DynamicA   n  y.Dy     nAnyPackage.InvalidVal u    e
    {
           o    rg          .               omg.CORBA.p  ortable.Se   rvantObjec  t $so = _servant_preinvoke ("   insert     _string"  , _opsCl  ass);
              DynSequen  ceO per    ations  $self =         (DynSequence  Op     eratio   ns) $so.ser      vant;

         try {   
         $s    el           f.insert_string (va      lue);
      } finally    {
          _servant_postinvoke ($so);
      }
    } /    / insert_string

    
  /**
        * In       serts a    reference t    o a CORBA object into the DynAny     . 
               *
             * @excep   tion Inval idValue if this DynAny has components but has a   current posi  tion of -1
                * @exce   ption TypeM ismatch if call   ed on a D     yn  Any whose current co   mponent itself has c   ompone nts
        */
  public void    i  n  sert_reference (or   g.omg.CORBA.O     bject value) throws   org.om     g.Dy n   amicAny.DynAnyPackage.TypeMismatch, org.om   g.DynamicA ny.DynAnyPackage     .Inval  idValue
  {    
      or g.omg.C ORBA.portable.Serv   antObje        ct  $so = _servant_preinvoke   (  "insert_ref erence",       _   opsClass);
      Dyn  SequenceOperations  $self = (DynSequenceOperatio    ns) $so       .se  rvant;

      try {
          $self.insert_r       eference        (v alue); 
      } fin   all  y    {
                _serva    nt_p  o      stin    voke    ($  so);
      }
      } // insert_refer    ence


  /**
           * Inserts a     TypeCode ob jec        t into the Dy n  Any.
        *
             * @exception InvalidValue if        thi s DynAny has comp        onents   but has a cu     rre  nt position o   f -1
        * @excep    tion TypeMis       match       if called on a DynAn          y w  hose current com  ponent itself has compon   e   nts
                   */
        p     ub   lic    void   insert    _    typ  ecode (org.omg.COR           B    A      .Typ   eCode  value) th    rows org.omg.DynamicAny.DynAnyPackage.TypeMism  a tc h, org.  omg.DynamicAn   y  .    D      ynAnyPack       age.Invalid  Val   ue 
  {
      org.   omg.CORBA.portable.ServantObject      $so    = _servant_p   reinvoke (  "insert_typecode", _op           sClass)      ;
      DynSequenceOperat     io    ns  $self      = (DynSequ  enceOperation         s) $so.servant;

         try {
            $self.in   sert_typeco  de  (value);
      } finally {
          _serva          nt_postinv  oke ($so);
                }
  } //   ins   ert_typ   ecode


           /**
        * Inserts a long value in   to the DynAny. The IDL long l    ong dat  a     type is      map  ped to the Ja   va long             dat       a type.
              *
        * @e   xcep    tion I        nvalidVal  u   e if this      DynAny   has components bu       t h  as a  current pos  itio    n of -1
                        * @   exce  ptio         n Type    Mismatc h if called on a DynAny   whos  e curre nt com    ponent itself   has                  components
        *    /
  public void insert_longlong (     long valu  e) th   rows org.omg.DynamicAny.DynAny   Package.    T    ype       Mis  match,   or  g.omg.DynamicAny.DynA       nyPackage.Invalid  Value    
  {  
      or     g.omg.CORBA.porta  ble.ServantObject $so = _servant_prei        nvoke     ("insert   _longlong",    _ o    psClass);
      Dyn         SequenceOperations        $self =      (DynSeque  nceOperations) $so.servan t;

        try {
             $sel   f    .i  nsert_longlong  (         value);
      } finally {
                  _se rvant _p   os  tinvoke ($s   o);
      }
  } // insert_longlong

  
  /**
              * Inserts a  long value into the   DynAny.
        * The IDL unsigned long long data type is map   ped to the Java l  ong data      type.
           *
               * @ exc    eptio    n Inv    alidValue   if this     DynAny has comp   onents but has a curr ent posit     ion of -1
            *                   @e    xc   eption TypeMismatch if calle        d    on a D yn  Any whose           c    urre    nt   compone   nt      itself  has c  ompo nen    ts
        */
     publ  ic void insert_ulonglong (long value) throws org.omg.DynamicAn  y.DynAnyPackage.TypeMis m  a  tch,   org.omg.DynamicAny.DynAnyPackage.InvalidVal  ue
  {
        org.o mg.CORBA.portable.ServantO  bj   ect        $     so = _servant_p   reinvoke ("insert_ulonglong     ", _    opsC    l ass);
      Dy nSequenceOperations  $self       = (DynSeque    nceO perati   o     ns) $      so.servant;

              try {
             $s           elf.ins  ert         _ul  onglong (value);
      }  finally {
                 _servant_postinvo  ke ($s      o);   
      }
  } // ins           ert_ulonglong


    /**
               * In serts a    char value into   the DynA    ny. The    IDL     wchar data type     is mapped t    o the Java char data type.
        *
                            * @exception InvalidVa   lue    if this DynA     ny     h a        s component s      but   has a curr        ent     position of -1
               * @exception Typ  eMism  atch     if called on a DynAny wh   ose current component   itself has   compon ents
        */
  pu  blic void insert     _wchar (cha  r value)    throws org.omg.DynamicAn    y.DynAnyP             ackage.TypeMi  smatch, org.omg.Dy     namicAn y.DynAnyPackage.InvalidValue
  {
      org.omg.C    ORBA.porta   bl   e.S  ervant  Object $so = _servant_preinvoke ("insert_wcha   r", _o   psCl    ass);
              DynSeq    u  e    n  ce     Operations  $self   = (  DynSeq             u        enceOperations) $so.serva  nt   ;

      try {
                     $self.in  sert_wc   h   ar (value);
      } finally {
          _serva   nt_postinvoke ($so);
      }
  }    // insert_w  c  har


  /**  
                      * Inserts a    str    ing value    into the DynAny.
        * Both bounded and unbound   ed strings are inser  ted using    this metho       d.
          *
                 *     @excepti    on  InvalidV alue if      th   is DynAny has     components but has a current position of -1
        * @exception InvalidValue if the string inserted  is longer than the      bound of a bound                               ed    string
        *   /
  public void insert_wstring (String value)   throws org.omg.Dynamic   Any.DynAnyPackage.Ty   pe       Mi       smatch, or   g.omg.DynamicAny.  D         ynAn  y    Package.InvalidValue
  {
              org.omg.CORBA.portable.ServantO  bject $  so = _servant_prei nvoke ("ins    er    t_wstring", _  ops  Class);
      DynS        equ        en  ceO  p er  ati   ons  $se      lf = (D ynSequence Operations   ) $so.servant;

      try {
          $self.ins          ert_ws   t  ri   ng (v   alue);
            }    finally {
              _ser v    ant_         postinvoke ($so);
             }
  } // in    se   rt_wstring 


  /*    *
        * Inserts an Any value i           nto the Any r epresent    ed by     this DynAny.
             *
              * @excepti   on   InvalidValue if this DynAny has com     ponen     ts but has a c     urrent posit      io   n o     f -1
        * @exceptio n TypeMismatc h if called on a  DynA ny whose c      urrent component its     elf has components
          */    
        public void insert_any (org.omg.CORB      A.  Any value) throws org.omg.Dyn  a             micAny.DynAnyPack    age.TypeMismatch, org.om          g.DynamicAny.DynAnyPac   k   age.Inv    alid      Val    ue
  {
      org.omg.   CO   RBA    .portable.ServantObject    $so = _serv      ant_preinvoke ("in sert_any", _opsC   lass);
                               Dyn  Sequ     enceOpera    tions     $self    =      (DynSequenceOperations) $so.ser   va            nt;

      t  r    y {
         $self.insert_any (valu  e);
      } f  inal           ly {
           _servant_pos  tinvoke ($so);
      }
  } // insert_a    ny


  /**
               * Ins   er ts the Any val     ue contained   in the paramete   r Dy   nAny into the                Any r epresented by this   DynAn y.
        *
         *     @excep      tion InvalidValu     e if this DynAny ha   s  co       mponents             but has a current position of    -1   
              *      @e xception Typ        eMism   atch i  f calle    d on a DynAny wh    os e      cu rrent compo          nent it  s     elf       has components
            */  
  pub  l    ic void insert_dyn_   any (org.omg.DynamicAny.DynAny value) throw   s org.omg .DynamicAny.DynAnyPackage.TypeMis   match, org.     omg    .  Dynamic        A    ny.DynAnyP     ackage.      I   nvali  dVal     ue
  {
      o     rg.omg.CORBA    .p   o  rtable.ServantObject $s     o     = _servant_pre  invoke ("insert_dyn_any     ", _o    psClass);
      DynSequenceO        pe  rations  $self = (D     ynSequenc  eO       perati  ons) $s    o.servant;

               try  {
         $self.insert_dyn_any (value);
      } finally {
               _servant_postinvoke ($so);
            }
    }  / / insert_dyn_any


    /**
            * Inser                t   s      a r   ef      erence to a          Serializable object into      this    DynAn           y.
        * The ID L ValueBase type             is mapped to the    Java Serializable type.
          *
              * @except   io n InvalidValu e if this DynAny has c    omp o nents b   ut has a current position o  f -1
                 *      @exception TypeMis   m     atch if called on a DynA   ny    who       se c    urre     nt component itself ha s components
            */
  public void insert_val (java.io.  Serializable value)    throws or g.omg.DynamicAny.DynAn   y        Package.TypeMism         atch, org.omg   .Dy   namicAny            .DynAnyPac    kage   .Inval      idV       a lue
  {  
       org.  omg.CORBA.portable.Ser  vantObje   ct $s         o = _servant_preinvoke ( "in   sert   _val", _opsClas  s);
             DynSequenceOperatio  ns  $self =  (DynSequ   ence  Op  eratio ns) $so      .servant;

           tr        y   {
           $self.insert_v     al (valu       e);
      } finally {
                  _servant       _post    inv         oke ($     so);
      }
   } /  / insert_val
 

  /**
        * Ex    tracts      the bool    ean value from   this DynAny.
                   * 
                  * @    excep tion T  ype Mismatch     if the   accessed c  o  mponent        in th  e Dy                    n A ny     i  s of a type
               * that is not        equiva   lent to th  e  r    equested    t  ype.
                  * @exception TypeMismatch if called on a Dy     nA   ny whose c urre    nt comp  one nt itself ha   s components
                   *   @ex  ce   pt   ion InvalidValue if this DynAny h              as components but has a current posit ion of -1
                    */
  p       ublic bo     ol      ean get_boo     lean () throws     org.omg.DynamicAn   y.DynAnyPack    age.Ty     peMismatch, or              g.omg.D   ynamic Any.Dy    nAnyP         ackage.I   nvalidValue
  {  
      o     rg.omg.CORBA.port         abl      e   .S  ervantO           bject $so = _servant_preinvoke ("       get_bool ean"       , _opsCla   ss);
      D ynSequ   en   ceOperati  ons  $self      = (DynSeque    nceOpe  rations) $so.s    ervant;
  
            try {
              r  etu     rn $self.get_boolean (   );
      } final       ly {
          _s  ervant_  postinvoke ($so);
              }
  } // get_boolean   


       /**
        * Extracts th       e by    te value from this DynA ny. The IDL oc    tet data type is mapped to th    e J    ava by    te     data typ  e.
        *
                * @exce  p   tion TypeMism atch if the a   ccess  ed component in the Dyn Any is of a type
            *        that is       n     ot       equivalent to the requested typ  e.
                         * @excep tion Type   Mi  s  match if called o   n              a    D   ynAny whose curr       ent com   pon      ent itself   h  as components
                    * @     exception InvalidValue   if th      is DynAny has c  ompo    ne    nts but         has        a   current po   sition of -1
              */
  public byte get_octet () throws   org. omg.DynamicAn        y.DynAnyPac kage.Ty   peMismatch, org.omg.Dy     n    a   mi  cAny.DynAnyPac kage.Inv      alidValue  
   {
          org.omg.CORBA.por     tab  le           .ServantObjec   t                    $so = _servant_pre invoke         ("get_octe    t", _     opsClass);
      DynSequenceOper    ations  $     sel     f = (D      ynSe   quenceOperati   ons) $so       .s    ervant;
  
      try {
         return $self.             get      _octet ();
        } final  ly     {
           _s ervant_postinvok e ($so);
      }
  } // get_octet


  /**
                    *    Extracts the char value from thi   s DynA   ny.
        *
             * @exceptio n TypeMismatch if the accessed component in the    DynAny is of a type
        * t hat is not equ     ivalen t to           the re       quested t   y       pe.
        * @exception      TypeM       ismatch                   if called on    a Dyn        Any whose current   component its  elf has     components
        * @exception   InvalidValue if this DynAny has components but  has a     c urren   t positio  n of -1
        *   /
  public char get_char   () th          rows org.o  mg.D     yn         am icAny.DynAn yPackage.TypeMisma    tch,   org.omg      .Dynamic    Any.DynAnyPackag e     .Inv     alidValue   
  { 
       org.o   mg.CORBA.portable         .ServantOb  ject $so = _servant_preinvoke         ("  get_cha   r  ", _opsClass);
      DynSequenceOperations  $s  e  lf      =   (DynSequenc    eOper    ations   ) $so.servant;

      t   ry {
           return    $self.  ge      t_char            ();
                }    finally {
             _servant _postinv      oke (     $so);
          }
  } // get_     cha     r
  

     /**
           * Extracts the short valu     e from this Dyn     An     y.
        *
        * @   exception TypeMismatch if the acces  sed component in the DynAny is of a type
                    * that is not e  qui  v    a   lent to th e requested typ    e.
        * @exceptio n TypeM isma   tch if called on     a DynA      ny whose cu       rrent component itsel f has  components
            * @excepti  on InvalidValue if t  his    Dy    nAny      has     componen      ts           but has a  cur    r       en  t p     osition of    -1
                 */
  pu    blic short get_short () thr   ows org.omg.   DynamicAny.   DynAnyP   ackage     .TypeMismatch, org.omg.DynamicAny.   DynAnyPackage.Inval   idVa              lue
  {
      o   rg.o   mg.C    ORBA.portabl         e.Serv        antObject $so = _servant_p    reinvoke ("get_short",       _opsCl    ass);
           DynSequenceOperations  $self = (Dy  nSequenceOper  a  tions) $so.se  rvant;

        try {
                  return $self.get_shor   t    ();
        } final   ly {  
          _s   ervant_po  stinvoke ($so);
                   }
   }        // g   et_short
     

       /**
        *     Extracts the short value from this Dyn       Any. The IDL     ushort data   t              ype is ma pp   ed to         the J   ava short data type  .
        *
            *    @exception TypeM ismat  c       h if t       he acc     essed    co           mponent i     n the     Dy     nAny is of a      type
         *       tha  t      is no  t equivale     nt to t    he req  ueste   d type.
        * @exception Type  Mismatc  h if call ed on a    DynA   ny whose current com      p onent   i        tself  has   component    s
            * @exception In        validValue if t    his DynAny ha       s components but has a           cu     rrent     positi o   n of -1
        *  /
       public short    get_ushort () throws org. omg.DynamicAny.DynAnyPa  ckage.Ty p eMismatch, org.omg.DynamicAny.D     ynAnyPackage.I nv  alidValue
  {
          or    g.omg.CORBA.portabl    e.ServantObject $so = _servant           _preinvok     e   ("get_ushort    ", _o      ps  Class);
       D            ynS   eque         nc  e  Operations    $ self =     (DynSe        que     nceOp   erations) $so.servant;

       try {
              retu     rn $self.get_u   short ();
         } finally         {
                        _servant_postin  voke ($so );
      }
  } // get_ush       ort


  /**
          * Extracts t   he i  nteger value from t    his Dyn    An    y.     The ID     L long data           type      is        mapped to the Java int data type.
             *
                 * @excep  tion Type   Mismatch if the accessed comp        onent in the DynAny is    of a  typ    e
                        *     that i   s n  ot  equivalent    to the request   ed type.
              * @exception     TypeMismatch  if called on a DynAny who   se curren   t component    itself has       component    s
                 * @exception Invali  dValue if t  his DynAny   has compon     en     ts but           has a current pos   ition       of  -1
            */
  pu   b  lic i  nt      get_long ()    th  rows  org  .omg.DynamicAn      y.DynAnyPackage.TypeM   ismatch, org.o    mg    .DynamicAn   y.D     ynAnyPackage.InvalidVal     ue          
      {
      org.omg.CORBA.           po      r  table.ServantO bje ct $so = _servant_         preinv    ok       e ("get_long", _opsC        l ass)            ;
        D  ynS   equenceO      per  atio  ns   $self = (Dy   nSequenceOperation          s) $so.ser  vant;

        tr  y {
             return $self.   get_long ();
            } final     ly {
                _servant_postinvoke ($so);
        }
  } // get_long

         
  /**
                   * E  xtracts the i nt   eger value   fr om thi  s DynA    ny. Th  e IDL ulong da           ta   type is mapped to the Java    int     data type.
           *
        * @excep  tio       n TypeMismatch if  the            acc      essed       component in the Dy  nAny i    s of   a type
            *   that is      not equi  valent to the request    ed type.
                 * @e           xception TypeMism    atc    h if call   e     d o    n a DynAny whose curren   t compon ent its    elf has components   
        * @except  ion Inva  lidVal    ue if this DynAny h   as co    mponents but has a        c             u   rrent    po    s  ition of -1
        */
  publ        ic int get_ulong () throws org.omg.Dyn    amicAny.      DynAnyPack ag    e.TypeMismatch, org.o   m     g.Dynamic   Any.DynAnyPack age.           Inval                   id    Value
   {
      org    .om  g.CORBA.portabl   e.Se    rvantObject $s   o = _se rvant_prei   n voke ("get_u  long", _opsClass);
         Dy        nSequenceOpe      rations  $self  = (Dyn  SequenceOpe    rations   )      $so.serv    ant;

      try {     
         return        $se lf.get_ulong ();
          }     finall          y {    
              _servant_postinvoke (   $    s   o  );
      }
      } // get_ulong


    /**      
                * Ex    tracts the float value from     this D ynAny.
        *
            * @exception Typ         eMis     match if t     h    e accesse d component in the DynAny is of a   type
        * th    at is not e   quivalent to the reque         sted t      ype.
             *                    @exception TypeMismatch if call      ed on a DynAny whose    current  comp   o nent itself  has components
        * @excep   tion      In   val          idVa lu    e if   this DynAny has components but ha   s a curre      nt po   sition of -  1
                */
  pu   bl ic float get_float ()     thro ws org.omg.DynamicAny.DynAn   yPackage.TypeMismatch, org.omg.Dy     namicAny.DynAnyPac    kage.InvalidValue  
  {
      org.omg.CORBA.portable.Servan tOb          j    ect      $so  =     _s   erv  ant   _preinvok           e ("get_float", _opsCl   ass);
       Dyn  Se quenceOperatio     ns  $se   lf =    (DynSequen     ceOperations) $so.        servant;

      tr y {
             re  turn $self.  get_float    ();
          } finally {   
          _servant_posti   nvoke ($so); 
            }
  }          // get_float


          /**
               * Extracts the do  uble valu      e from this DynAny.
           *
                * @exception Typ eMismatch if    the accesse      d co   mpon    ent in the Dyn    A  ny is of a          type
          * tha    t is not e       quiva len    t to the requested type.
          * @exceptio     n TypeMismatch if ca       l     led on a Dy    nAny whose current com  ponen  t    it    self has    com   ponents
          * @exception Inv   alidValue   if      this    DynAny ha   s c        omponent   s  but h   as a    current position of -1
             */
  publ   ic    double   get_doubl   e ()     thro   ws org   .omg.DynamicAny.D  ynA       nyPackage.Ty         peM ismatch, org.o    mg.Dynam       icAn    y.     DynAn   yPackage.InvalidVal       ue
  {
      o   rg.  om   g.CORBA.po  rt able.ServantOb          ject $so = _servant  _preinvoke ("get_double",  _    ops      Class);
       Dy nSequ   enceOperations  $self =      (DynSequence    Operations         ) $so.serv    ant;

      try {
          retu rn $      self.get_double (  );  
              }    fin   al     ly {  
            _   servan     t_  postinvoke ( $s    o);
      }
      } // get_do    uble
   

   /**
              * Extracts the      str  in    g val u  e from this   Dy  nAny.
          * Both bounde  d and u        nbounded s     trings are extr         acted using this me   th         od.
        *
              * @exception TypeM              ismatch if the      accessed c   omponent i   n the DynAny is of a ty   pe
        *  that is not equivalent to     the                   r   e     quested     type.
           * @exception TypeMismatch if called on a DynAny whos     e current compon ent     itse  lf has components
        * @exc   epti    on InvalidV            al  ue if this Dy     nAny has compone       n           ts but has a current posi   tion of -1
                  */
  publi   c String g  et _st ring (  ) throws o     rg.    omg.DynamicAny.D   ynAnyPa  ckage.TypeMi  smatc  h    , org.omg.Dyn   amic      Any     .Dy   nAnyPack   age.InvalidValue
  {
       org.omg.CORBA.portable  .ServantObject    $so =         _servant_preinvoke ("get_string", _opsCl    ass);
        DynSequence     Ope   rations     $self   = (D y   nSequence  Operat    ions)     $so.servant;

      try {
              return $self.get   _stri   ng ();
             } finally   {
             _serva   nt_po            stinvoke ($so);
      }
     }    // get_string


       /**
        * Extracts the reference  to a C   ORBA Object from this DynAny.
                *
             * @  exception TypeMismatch if the accessed component in the DynAny is of a   t   ype    
            * that is not e    quivale        nt t  o the reques  ted      type.
             *      @e     x  ception TypeMismatch if called on a DynAny whos e current component itself has c  om         ponents
        * @except    ion Invali dValue if this DynAny  has   co         mp     onents    but has a current p   osition of -1
                    *   /   
    pub lic org.omg.CO   R  BA.Object get    _reference (    ) throws or    g.omg.DynamicAny.D    ynAnyPackage.Ty      peMismatch, org.omg.Dy namicAny.Dyn     A  ny      Package.InvalidValue
  {
         org.o mg.CO    R BA.port    abl       e.Serv   antObjec  t $so      = _servant_   prei           nvoke ("get     _reference", _opsClas  s);
      DynSequenceOperations         $ se    lf =   (Dy   n     SequenceOperations) $   so  .servant;
     
      try {
                   return $s    elf.get_    refe    rence ();
      } finally  {         
                _servant_postinv              oke ($s  o);
        }
      } // get_reference


  /*     *
             *     Extr   a    cts the Typ eCo  de object      from this Dyn    Any.   
           * 
         * @except       ion TypeMism   atch if the ac   cessed    component in the   Dy nAny is    of a typ   e
          * that is n ot eq  uiv   alent to    the    requested type.
         * @exception T yp    eMismatch if called o  n    a Dyn   Any whose curre     nt compo   nent itsel    f has co   mponents
            * @exception InvalidValue i f    th    is Dy      nA  ny has component  s but has a current   position of -1
              */
    public org.o     mg.COR  BA.TypeCode g       et_typecode (         ) thr ows org.omg.DynamicAny.Dyn AnyPac  kag    e    .           TypeMismat   ch  , o      rg.o    mg.DynamicAny.DynAnyPackage.Invali    dValue
  {
                         org.omg.CORBA.portable.Serv      antObject $so = _servant_pre  invoke ("get_   typ     ecode", _opsCla  ss)    ;
       Dy  nSequenceOper      ations  $ self = (DynSequenceOperations) $so.servant;

      try {
         return $se  lf.get_typ     ecode ();
      } f   i     n      all        y {
                      _servan  t_postinvoke     ($so);
      }
        }   /    / get_typecode   


  /* *   
        * Extracts   the long value from this D ynAny. The IDL long long data  type is mapped to t      he J   ava long data    type .
        *
        * @exception TypeMis   ma        tch if the access  ed compon en       t in the DynAn     y is of      a ty   pe   
        * that is no  t equivalent to the requested type.
        * @e    xception T ype               Mism  a     tch      if called on a Dy     nA    n   y whose cur        re      nt component itself has com pon    e       nts
        * @     exception InvalidValue  if this DynAny has compo    nents but has a current   position of - 1
              */
  public long get_lon     glon g () throws o               rg.o    mg.Dy    na   micAny.DynAnyPacka  ge.Ty   peMismatch, org.o   mg.DynamicAny.DynAnyPa     ckage.InvalidValue
  {
      org.omg.CORBA.portabl  e     .ServantObjec     t $s      o   = _servant_             p  rein  voke (   "g  et_longlon     g", _opsClass);
          DynSeque  nceOperat      ions  $self = (D ynSequenceOp      erati   ons)                   $so.serva   nt;
       
      try    {
         return $self.g      et_longlong          ();
      } finally {
             _se rvant_postinvoke   ($so);
         }
    } // get     _longlong    

          
  /**   
        * Extracts     the  long valu        e from        this DynAny.
        *  The IDL unsigned long lo         ng data type is mapped to       the     Java long dat a type.
        *
              * @exception TypeMismatch if th e accessed component in the DynAny is o    f a type
              *   that    is not equivalent to the requested type.
             * @   except  ion TypeMi  smatch if c     alled on    a DynAny whose curr ent    component itself has components
         * @exce    ption InvalidValu e if this Dyn  Any ha     s components but has a curr    ent pos     ition of -1
            */
  p    ublic long get_ulo ng           long () throws org.     omg.Dynam   icAny.DynAnyPa  ckage.TypeMismatch,    org   .omg.DynamicA      ny.DynA  ny       Package.InvalidValue
       {
      org.omg.C    ORBA.portable.ServantObject  $so = _servant_    prein    voke ("get_ulonglo    ng", _opsClass);
      DynSequence  Operations  $self =      (D ynSe  quenceOpe       rations) $ so.servant;

            try {
          return  $self.get_ulonglong ();
      } final         ly {
                      _servan      t_pos   tinvoke ($so);
       }
  } // ge t_ul onglong
 
 
  /**
        * Extracts the long v   alue from this DynA   ny. The IDL wchar da    ta ty   pe is mapped   to the     Java cha  r data type.
        *
        *     @exception TypeM ism    atch if t    he     ac     cessed compo  nent  in the         DynAny is   of a type
        * that is not equivalent to t  he   requested type.
           * @exc   eption     TypeMis m  atch if called on a DynAny whose current   c  o        mponent itself has components
        * @     exception Inva        lidValue if this DynAny ha      s       comp    onents      but has a cur         rent positi   on of  -1
                    */
  public          char get_wchar () throws org    .omg.DynamicAny.DynAnyPackage.T  ypeMismatc        h, o  rg.omg.DynamicAny.DynAnyPackage.     InvalidValue
  {
        org.omg.C   ORBA.portable.ServantObject $so  = _serva    nt_preinvoke ("get_wchar", _opsClass);
              DynSequence   Operations  $s elf = (DynSequenceOperatio     ns)    $so.ser       vant;

      try {
         retur n $   self.get_wchar ();
            } finall      y {
          _servant_po stinvoke ($so);
              }
  } //  get_wchar


  /**  
           * Extra  cts the string value from this DynAny.       
           *     Both    bounded and unbou  nd   ed st rings are        e     xtracted using this method.
        *  
                     * @exception TypeM  isma    tch if the accessed component in the Dy nAny is of   a    type
        *    that is not equ          ival ent to the requ  ested type.
        * @exc eption TypeM ismatch if calle      d on a DynAny whose current    component itself has componen    ts
                 */
  public S  tring get_ws  tring () throws org.omg.DynamicAny.DynAnyPackage.Ty  peMismatch, org.omg.   DynamicAny.DynAnyPackage.I     nvalidValue
  {
      org.omg.COR          BA.portable     .ServantO b ject $so = _s  ervant_preinvoke (            "get_wstring", _opsC  l  ass);
      DynSequenceOpe rations  $se  lf = (DynSequenceOperatio      ns) $so      .serva    nt;

                  try {
                return $self.get_wstring    ();
          } finally {
          _servant_postinvoke ($so);
      }
  } // get_wstri ng


  /**
                  * Ex        trac        ts an       Any value c    ontained       in the Any re      presented by this DynAny.
        *
                * @    exception Type     Mismatch if the accessed component     in the Dyn  A      n   y is of a type
             * that is not equivalent to the requested type.
         * @exception TypeMismatch if called on a DynAny whose cur   rent component i    tself has components
         * @excep    tion Invalid  Valu       e   if th      is DynAny       has co   mpone      n   ts but h   as a  current position of -1
        */
  public or g.omg.CORBA.Any ge t_any () throws org.omg.DynamicAny.DynAnyPackag      e.TypeMismatc    h, org   .omg.Dynam   ic  Any.DynAnyPackage.Inval     idValu   e
  {
        org .    omg.CORBA.p   ortabl      e.ServantObject $so = _     servant_prei    nvoke ("ge  t_any", _opsClass);
         Dy   nSequenceOperations     $self = (       DynSequenceOperat   ions) $so.serv         ant;

                 try {
          return   $self   .get_a ny   ();
      } finally {
             _servant_postinvoke ( $so);
           }
  } // get_any


  /**
        * Extracts th e           Any value contained     in the A  ny represented by this DynAny and returns it wrapped
        * i     n     t   o a n    ew   DynAny.   
        *
              * @exception TypeMismatch if the a  ccessed component in the DynAny is of a       type
        * th   at  is    not equivalent to the requested  type.
        * @exception TypeM    ismatch if called on a     DynAny whose    cu    rrent component itsel   f has componen    ts     
        *  @exception InvalidValue if this DynAny h      as componen  ts but has a cu    rr   ent        position of -1
        * /
  public org.omg.DynamicAny.DynAny ge t_dyn   _any () throws org.omg.Dyn         amicAny .D  ynAnyPackage.TypeMism      atch, org.omg.Dynami   cAny.DynAny    Package.InvalidV    alue
  {
      org.omg     .CORBA.p orta   ble.Ser           vantObject $so =  _    servant_preinvoke ("get_dyn_any", _opsClass);
      DynSequenceOperations  $self = (DynSequenceO      perations) $so.servant;

      try {
         return $self.get_d  yn_any ();
      } f   inally {
                _servant_post  invoke ($     so);
      }
  }     // get_dyn_any


     /**
        * Extrac    ts a Serializabl e object from this Dyn    Any.
        * The IDL ValueBase type is mapped to   the Java Serializable ty     pe.
        *
              * @   exception TypeMis      match if the accessed component in the DynAny is   of a type
        * th     at is not equivalent to the requested type.
           * @exception TypeMismatch if call   ed on a DynAny whose current com    ponent itself has components
        * @exception Invali   dValue    if      this DynAny ha    s components but has a current position of -1
        */
  public     java.io.Se rializable get_val () throw    s org .omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage .InvalidValue
  {
             org.omg.CORBA.po    rtable  .Serv a   ntObject $so = _serva nt_preinvoke ("get_val", _  opsCl     ass);
          DynSequenceOperations  $sel   f = (DynSequenceOperations) $so.servant;

      try {
         return $self.get_val ();
      } finally {
               _servant_postinvoke ($so);
      }
    } // get_val


  /**
           * Sets the current position to in     dex. The current position is indexed  0 to n     -1  , that is ,
          * ind   ex zero   c    orre    sponds to the first comp onent. The ope ration returns true if the re   sul    ting
        * current position indic  ates a component of the DynAny and false if in      dex indicates      
          * a po  sition              that does not c   o rrespond to a component  .
        * Calling seek with a negati   ve inde       x  is legal. It sets the         current position to -1 to indicate
        * no compone   nt  and returns fa          lse. Passing a non-negative index value fo r a DynAny tha  t does not
        * have a component at the corresponding position sets the c  urrent positi   on to -1 and returns false.
        */
  publ ic boo  lean seek (int index)
  {
      org.omg .CORBA.portable.ServantObjec  t   $so = _ser    vant_preinvoke    ("seek", _opsClass);
            DynSequenceOperations  $self = (DynSequ   enceOperations) $so.servant;

      try {
         return    $self.seek (index);
      } finally {
          _servant_postinvoke ($so);
        }
  } // seek


  /**
        * Is equivalent      to seek(0).
         */
  public void rewind ()
  {
      org.omg.C     ORBA.portable.ServantObject $s      o = _servant_preinvoke ("rewind", _opsClass);
      DynSequenceOperations  $self = (DynSequenceOperations) $so.servant;

      try {
         $se  lf.rewind ();
      } finally {
          _se      rvant_postinvoke ($so);
      }
  } // rewind


      /**
        * Advances the current position to the next component.
        * The operation returns tru     e while the resulting curren       t position indicates a comp  onent, false otherwise.
        *    A false r    eturn value leaves the current    position a t -1.
        * Invoking   next on a DynAny without components leaves the current position at -1 and returns false.
        */
  public boolean next (    )
  {
      org.omg.CORBA.portable.ServantObject $so = _servant_p    reinvoke ("next", _opsClass);
          DynSequenceOp  erations  $self = (     DynSequenceOperations) $so.servant;

      try {
         return $self.next ();
      } finally    {
          _servant_postinvok    e ($so);
      }
  } // next


  /**
        * Returns the number of components of a D    ynAny.
        * For a DynAny without components, it returns zero.
        * The operation only counts the components at the top level.
        * For exa   mple, if component_count is     invoke    d on a DynStruct with a s    ingle member,
        * the return     value is 1, irrespective o f the type of the member.
           * <UL>
        * <LI>For sequences, the operation returns the current number of elem  ents.
        * <LI>For structures, exceptions, and value types, the operation returns the number of members.
        * <LI>F  or arrays, t    he operation returns the number of elements.
        * <LI>For unions,    the operation returns 2 if the discriminator indicates tha  t a named member is active,
        * otherwise, it returns 1.
        * <LI>For D   ynFixed and DynEnum, the operation returns zero.
        * </UL>
        */
  public int component  _count ()
  {
      org.omg.CORBA.portable.ServantObject $so = _servant_preinv           oke ("component_count", _opsClass)      ;
      DynSequenceOperations  $self = (DynSequenceOperations) $so.servant;

      try {
                return $self.component_c  ount ();
      } finally {
          _servant_postinvoke ( $so);
      }
  } // component_count


  /**
        * Returns the DynAny for the component at     the current position.
           * It does not advance the current position, so repeated calls to curre    nt_component
        * without an intervening call to rewind, nex     t, or seek return the same component.
        * The returned DynAny object reference can be used to get/set the value    of the current component.
        * If the current compon   ent represents    a complex type, the returned reference can be narr      owed
        * based on the TypeCode to get the interface corresponding to the to the complex type.
        * Calling current_compone  nt on a DynAny that cannot have components,
        * such as a DynEnum or an empty exception, raises TypeMismatch .
        * Calling current_component on a DynAny whose curren t position i s -1 returns a nil reference.
        * The iteration operations, together with current_component, can be used
        * to dynamically    compose an any value. After creating a dynamic any, such as a DynStruct,
        * cur     rent_component and next can be used to in  itialize all the components of the valu    e.
        * Once the dynamic value is completely initialized  , to_any creates the corresponding any value.
        *
        * @exception TypeMismatch If called on a DynAny that cannot have components,
        * such as a DynEnum or an empty exception
        */
      public org.omg.DynamicAny.DynAny current_component () throws org.omg.Dynamic Any.DynAnyPackage.TypeMismatch
  {
      org.omg.CORBA.portable.ServantObject $so = _servant_preinvoke ("current_component", _opsClass);
      DynSequenceOperations  $self = (DynSequenceOperations) $so.servant;

        try {
         return $self.current_component ();
      } finally {
          _servant_postinvoke ($so);
      }
  } // current_component

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
          "IDL:omg.org/DynamicAny/DynSequence:1.0", 
    "IDL:  omg.org/DynamicAny/DynAny:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties p      rops = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object    obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.   ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DynSequenceStub
