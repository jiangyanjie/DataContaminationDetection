
package edu.isi.powerloom.logic;

import edu.isi.stella.javalib.Native;
import     edu.isi.stella.javalib.StellaSpecialVariable;
import    edu.isi.stella.*;

pub   lic class _StartupFrameSupport {
     static      void helpStartupFr      ameSu     ppor  t1() {
    {
      Logic.SGT_PL_KERNEL_KB_SCALAR = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("SCALAR", Stella.getStellaModule( "/PL-KERNEL-     KB", true  ), 1)));
      Logic.SGT_LOGIC_F_ALL_TAXO NOMIC_TYPES_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("F-ALL-TAXON    OMIC-TYPES-MEMO  -TABLE-000",      null, 1)));
      Logic.SGT_LOGIC_F_ALL_     TYPES_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolW      rtModule("F-ALL-TYPES-MEMO-TABLE-000"  , null, 1)));
           Logic.SGT_LOGIC_F_ALL_EQUIVALENT_RELATIONS_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("F-A LL-EQUIVALENT-RELATIONS-MEMO-TABLE-000", null, 1)));
      Logic.SG    T_LOGIC_F_ALL_SUPE  RRELATIONS_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbo   lWrtMod      ule( "F-ALL-SUPERRELAT   IONS-MEMO-TABLE-000", null, 1)));
           Logic.SGT_LOGIC_F_ALL_SUBRELATIONS_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymb     ol.in ternRigidSymbolWrtModule("F-ALL-SUBRELATIO NS-MEMO-TABLE-000", null      , 1)));
      Logic.SGT_LOGIC_F_ALL_DIRECT_SUPERRELATIONS_MEMO_TABLE_000 = ((Surrogate)(Generaliz  edSymbol.internRigidSymbolWrtModule("F-ALL-DIRECT-SUPERRELATIONS-MEMO-TA   BLE-000",     null, 1)));
      Logic.SGT_LOGIC_F_ALL_DIRECT_SUBRELATIONS_MEMO_TABLE_000 = ((Surrogate)(Generalized   Sym    bol.internRigidSymbolWrtModule("F-ALL-DIRECT-SUBR      ELATIONS-MEMO-TABLE-00    0", null, 1)));
      Logic  .SGT_PL_KERNEL_KB_RANGE_MIN_CARDINALITY = ((Surrogate)(GeneralizedSymbol.internRigidSymbol  Wr  tModule("RANGE-   M     IN-CARDINA  LITY", Stella.getStellaModule("/PL-KERNEL-KB", true), 1)));
      Logic.SGT_PL_KERNEL_KB_RANGE_MAX_CARDINALITY = ((Surrogate)(GeneralizedS ymbol.internRigidSymbolWrtModule("RANGE   -MAX-CARDINALITY", Stella.getStellaModule("/PL-KERNEL-KB", true), 1)));
      Logic .SGT_PL_KERNEL_KB_RANGE_TYPE =   ((Surrogate)(G   eneralizedSymbol. internRigidSymbolWrtModule("RANGE-   T     YPE", Stel   la.getStellaModule("/P L-KERNEL-KB", true), 1)));
      Logic.SYM_LOGIC_p    CONCEPT = ((Symbol)(G    eneralizedSymbol.internR     igidSymbolWrtModule("?CONCEPT", null, 0)));
        Logi c.SYM_LOGIC_pINSTANCE = ((Symbol)(Generaliz  edSymbol.inte     rnRigidSymbolWrt  Mo dule("?INSTANCE", null      , 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_TEST_TYPE_ON_INST  ANCEp_QUERY_000 = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LE  VEL.LEVELLIZED-T  EST-TYPE-ON-INSTANCE?-QUERY-000", null, 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_ALL_CLASS_INSTANCES_QUERY_000 = ((Symbol)(GeneralizedSymbol.internRigidSym   bolWr tModule("M-NORMAL-INFERENCE-LEVEL.LEVE          LLIZED-ALL-CLASS-INSTANCES-QU        ERY-000", null, 0)));
      Logic.SYM_LOGIC_pRELAT  ION = ((Symbol)(Generaliz    edSymbol.internRigidSymbolWrtModu le("?RELATION", n    ull, 0)));
      Logic.SYM_LO      GIC_M_NORMAL_INFERENCE_LEVELd   LEVELLIZED_ALL_RELATION_VALUES_QUERY_000 = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("M-NORMAL-INF       ERENCE-LEVEL.LEVELLIZED-ALL-RELATION-VALUES-QUERY-000", nu  ll, 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFER      E  NCE_LEVELdLEVELLIZED_ALL_RELATION_VALUES_QUERY_00  1 = ((Symbol)(GeneralizedSymbol.inte     rnRigidSymbolWrtModu le("M-NORMAL   - INFERENCE-LEVEL.LEVELLIZED-ALL-RELATION-VALUES-QUERY-00   1", null, 0)));
      Logic.SYM_LOGIC_pZ = ((Symbol)(GeneralizedSymbol.internRigi        dSymbolWrtModule("?Z", null, 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_ALL_RELATION_VALUES_QUERY_002 = ((Sy           mbol)(Generalize     dSymbol.internRigidSymbolWrt  Module("M-NORMAL-INFERENCE-LEVEL.LEV  ELLIZE   D-ALL-RELATION-VALUES-QUE  RY-002", null, 0)));
      Logic.SYM_LOGIC_pW = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("?W", null, 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_ALL_RELATION_VALUES_QUE   RY_003      = ((Symbol)(GeneralizedSym  bol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LE        VEL.LEVELLIZED-ALL-RELATION-V    ALUES-QUERY-003", null, 0)  ));
      Logic.SYM_LOGIC_ALL = ((Symbol)(GeneralizedSymbo  l.internRigidSymbolWr   tModule("ALL", null, 0)));
      Logic.   SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED    _TEST_RELATION_ON_ARGUMENTSp_QUERY_000 = ((Symbol)(Generali  zedSymbol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LEVEL.LEVELLIZED-TEST-RELATION-ON-ARGUMENTS?-QUERY-000", null, 0)) );
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_TEST_RELATION_ON_ARGUMENTSp_QUERY_001 = ((Symbol)(General      izedS  ymbol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LEVEL.LEV  E LLIZED-TEST-RELATION-ON-ARGUMENTS?-QUERY-001", null, 0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_TEST_RELATION_ON_A  RGUMENTSp_QUERY_002 = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LEVEL.LEVELLIZED-TEST-RELAT  I   ON-ON-ARGUM   ENTS?   -QUERY-002", null  , 0)));
         Logic.SYM    _LO   GIC_M_NORMAL_INFERENCE   _LEVELdLEVELL  IZED_TEST_RELATION_ON_ARGUMENTSp_QUERY_003      = ((Symbol)(Generali    zedSymbol.internRigidSy mbol  WrtModule("M-NORMAL-INF    ERENCE-L    EVEL.LEVELLIZED-TEST-      RELA   TION-ON-ARGUMENTS?-QUER      Y-003 ", null, 0)));
      Logic.SYM_LOGIC_pOB   JECT =     ((   Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("?OBJECT", null, 0)));
      Logic    .SYM_LOGIC_pN = ((Sym  bol  )(G    eneralizedSymbol.internRigidSymbolWrtModule("?N", null, 0)));
      Logic.SYM_LOGIC_RANGE_MIN_CARDINALITY = ((Symbol)(GeneralizedSymbo  l.internRigidSymbolWrtMo      dule("RANGE-MIN-CARDINALITY", null,       0)));
      Logic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELd LEVELLIZED_GET_SLOT_MINIMUM_CARDINALITY_QUERY_000 = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("M  -NORM      A  L-IN   FERENCE-LEVEL.LEVEL     LIZED-GET-SLOT-MINIMUM-CARDI   NALITY-QUERY-000", null, 0)));
      Logic.SYM_LOGIC_RANGE_MAX_CARDINALITY = ((Symbol)(GeneralizedSymbo    l.intern    RigidSymbolWrtModule("RANGE-MAX-CARDINALITY",        null, 0)));
      Log     ic.SYM_LOGIC_M_NORMAL_INFERENCE_LEVELdLEVELLIZED_GET_SLOT_MAXIMUM_CARDINALITY_QUERY_000 = ((Symbol)(GeneralizedSymbol.inte     rnRi   gid    SymbolWrtModule("M-NORMAL-INF   ERENCE-LEVEL .LEVELLIZED -GET-SLOT-MAXIMUM   -CARDINALITY-QUERY-000", n   ull, 0)));
               Logic.SYM_LOGIC_pTYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("?TYPE", null, 0)));
      Logic.SYM_LOGIC_RANGE_TYPE = ((Symbol)(GeneralizedSymbol.internRigi   dSymbolWrtModu    le(   "RA        NGE-TY        PE", null, 0)));
      Logic  .SYM_LOGIC_BOUND_VARIABLES = ((Symbo    l)(GeneralizedSymbol.internRigidS ymbolWrtModule("BOUND-VARIABLES ", null, 0)));
        Logic.SYM_LOGIC_  M_NORMAL_INFERENCE_LEVEL   dLEVELLIZED_ALL_SLOT_VALUE_TYPES_QUERY_000 = ((Sym bo l)(GeneralizedSymbol.internRigidSymbolWrtModule("M-NORMAL-INFERENCE-LEVE L.LEVELLIZED-ALL-SLOT-VALUE-TYPES-QUERY-000", null, 0)));
      Logic.SYM_LOGIC_S    TARTUP_FRAME_SUP  PORT = ((Symbol )(GeneralizedSymbol.  internRigi dSym   bo      l     WrtModule("STARTUP- FRAME-S      UPPORT", null, 0)));
    }
  }

  static void helpStartupFrameSupport2() {
    {
      Stella.defineFunctionObject("COERCE -TO-INSTANCE-IN-MODULE", "(DEFUN (COERCE-TO-INSTANCE-IN-    MODULE OBJECT) ((SELF OBJE  CT) (MODULE M  ODULE) (LOCAL? BOOLEAN    ) (ORI   GINAL OBJECT)) :PUBLIC? TR  UE)", Na      t     ive.       fin   d_java_method("ed  u.isi.    powerloom.logic.Lo  gic", "coerceToInstanceI  nModule",    new java.la    ng.Class [] {Nativ e.find_ja  va_class("edu.isi.stella.Stella_Object"), Native .find_java_class("edu.isi.   stella.Module"), java  .lang.Boolean.TY  PE, Native.find_java_class("edu.isi.stella.Stella_Object")}),  null);
      Stella.defin  eFunctionObject("  GET-INSTANCE", "(DEF  UN (GET-INSTANCE OBJEC     T) ((INSTANCERE  F OBJECT)) :DOCUME NTATION   \"Re turn the    near est instance with name 'instanceRef'\nvisible from the    current module.  'instanceRef'    can   be a string, symbol,\nor surrogate.  If 'instanceRef'      is a surrog    ate, the search originates\nin the mod ule the surrogate was interned in.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logi c", "g   etInstance", new java.lang.Class [] {Native.find_java_class("    edu.isi.stella.Stella_Object")}),   null);
      Stella.defineFunctionObject("FIND- IN STANCE", "(DEFUN (FIND-INSTANCE OBJECT) ((INSTANCEREF OBJECT    )) :DOCU   MENTATION \"Return   the nearest         in    stance     with n   ame 'instanceRef'\nv   isible from the current module.  'instanceRef' can        b     e a string, symbol,\nor surrogate.  If  'instanceRef' is a surrogate,   the search originates\nin the modul  e the surrogate was interned     in.    \" :COMMAND?       TRUE :PUBLI  C? TRUE :EVALUAT      E-ARGUMENTS? FALSE)", Native.find_java_method(   "edu.isi.powerloom.logic.Logic  ", "findInstance"  , new java.lang.Class [] {Native.find_java_class("edu.isi.stella   .Stella_Object")}), null);
      Stella.defineFunctionOb ject("GET-SELF-OR-PROTOTYPE", "(D           EFUN (GET-SELF-OR-PROTOTYPE LOGIC-OBJECT) ((INSTANCEREF OBJECT)) :DOCUMEN  TATION \"Used to convert a computation to reference so-called\n'template' slots rather tha  n 'own' slots:  If 'instanceRef' denotes a   class,\nreturn a prototype of that      class.  Otherwise, ret  u    r n 'instanceRef'.\  ")", Native.find_java_method("edu.isi. powerl  oom.logic  .Logic", "g       et    SelfOrPro   totype", n  ew java.lang.Class [] { Na   tiv    e.      find_java_cla      ss("edu.isi.stella.Stella_    Obje     ct")}), n     ull);
      S  tella.define FunctionObject   ("GET-C  LASS", "(      DEFUN ( GET-CLASS LOGIC-OBJECT) ((INSTANCEREF OBJECT)) :DOCUMENTAT     ION \"R   eturn the neares  t class with         name 'instanceRef'\nvisible from the c     urrent module.   'instanceRef'     can be a string, symb     ol,\no    r       surrogate.  If 'instanceRef' is a surrogate, the   search originates\nin the module the surrogate was in terned in.\" :PUBLIC? TRUE)", Native.find_java_method("ed   u.isi. pow   erloom.logic.Lo          gic", "getCl   ass",     new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
       Stella   .defineFunct ionObject("GET-RELATION", "(DEFUN (GE    T-REL   ATION LOGIC-OBJECT) (  (INSTANCEREF OBJECT)) :DOCUMENTAT ION       \"Return the nearest   relation with name 'instance  Ref'    \nvisible from the current module.  '        instanceRef'        can be a string, symbol,\nor surrogate.  If 'instance    Ref' is a surrogate, the search originates\nin the mod ule the sur   rogate was inte  rned in.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.lo   gic.Logic", "getRelation", new java.lang.Class []  {Native.fi    nd_java_class("edu.isi.      stella.Stella_Object")}), null);
      Stella.defineFunctionObject("GET-MODULE   ",   "(DEFUN (GET-MODULE MODULE) ((MODULEREF OBJEC  T)) :DOCUMENTATION \"Return a modu  le named 'moduleRef'.\" :PUBLIC? TRUE)", Native.find_java_method("e du.i  si.powe     rloom.logic.Lo gic",         "getModule", new java.lang.Class [] {Native.find_java_cla  ss("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctio    nObject("C  OLLECTION?", "(DEFUN (COLLECTION? BOOLEAN   ) ((OBJECTREF OBJECT)) :D       OCUMENTATION \"R     eturn T  RUE i     f 'objectRef'    denotes a relation or a class.\" :PUBLIC? TRUE)", Native.find_java  _method("ed       u.isi.powerloom.l   ogic.Logic", "col lecti       onP", new    java.lang.Class [] {Native.find_java_class("edu.isi.s    tella.St  ella_Obj    ec   t")}), null);
        Stella.define    Func  tionObject("   CLASS?", "(DEFUN (CLASS ?  BOOLEAN   ) ((OBJECTREF OB  JECT)) :DOCUMENTAT ION \"Return TRUE  if 'objectRef'      de   notes a class.\   " :PUBLIC? TRUE)", Native.find_java_method("edu.isi.     powerloom.lo   gic.Logic ", "clas  sP", new java.l  ang.Class [] {Native.find_java_class("edu.isi     .stella.Stella_Ob ject")}), null);
       Stella.defineFunctionObject("RELATION?", "(DEFUN (RELAT  ION? BOOLEAN) ((OBJECTREF    OBJECT)) :DOCUMENTATION \"Return TRUE if '   objectRef' denotes a relation or a class.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.      powerloom.logic.Logic", "relatio  nP  ", new java.lang.Class [] {Nativ e.find_java_class("edu.isi.stella .St      e   lla_Object")}), null);
               Stella.de fineFunctionO   bject("FUNCTION  ?", "(DEFU  N (FUNCTION? BOOLEAN    ) ((RELATIONR     EF OBJECT)) :DOCUMENTATION \"Return     TRUE if 'relationRef' references a function.\" :   PUBLIC? TRUE)", Nat  ive.find_java_method("edu.isi.powerloom.logic.Logic"   , "functionP", new java.lang.Cl     ass [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.de     fineFunctionObject(   "CONSTANT?", "(DEFUN (CONSTANT? BOOLEAN) (      (OBJ  ECTREF OBJECT)) :DOCUMENTATION \"Return TRUE if `objectRef' denotes a literal or scalar.   \")", Nativ   e.find_java_me   thod("edu.isi.powerloom.lo     gic.Logic", "con    stantP", new java.lang.C    lass [] {Native.find_java_class("edu.isi.stella.Stella_Object"  )}),    null);
        Stella.defineFunctionObject(" RELA     TION-NAME", "(DEFUN (RELATION-NAME STRING) ((SELF NAMED-DESCRIPTION)) :DOCUMEN  TATION \"Give n a relation object, return     it's name.\") ", Nati  ve.find_java_method("edu.isi.powerloo     m.logic.Na    medDescri   ption", "relat  ionName", new java.lang.Class [] {Native.find    _j       ava_class("edu.i     si.powe    rl    oom       .logic.NamedDescription")}), null);
      Stell      a.defineFunctionObj  e ct("TERMIFY", "(    DEFUN (TERMIFY OBJECT) ((SELF   OBJECT)) :DOCUME    NTATION \"Convert 'self' into an equivalent PowerLoom object\nthat can be passed as an argument wherever an ins    tance i  s expected.\")", Native.find_jav   a_method("edu.isi.powerloom.logic.Logi   c", "termify", new java.la   n         g.Class [] {Native.find_java_class("edu.   isi.stella.Stella_Object")}), null);
      St ella.d      efineFunctionObject("RELATION-ARITY-OK?", "(DEFUN (       RE   LATION-ARITY-OK? BOOLEAN) ((RELATIONREF SURROGATE) (ARIT   Y INTEGER)))", Native.find_java_m  ethod("edu.isi.powerloom.logic.Logic", "relationArity OkP", new java.lang.Class [] {Native.find_java_   class("edu.isi.stella.Surrogate"), ja   va.lang.Integer.TYPE}   ), null);
      Stella.defineFunction    O       bject("FILTER-OUT-UNNAMED-DESCRIPTIONS ", "     (DEFUN (FILTER-OUT-UNNAMED -DESCR   IPTIONS   (CONS OF NAMED-DESCRIPTION)) ((DESCRIPTIONS (CONS OF   LOGI        C-OBJECT))))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "filterOutU   nnamedDescript  ions",    new  java.lang.  Class []        {Native    .find_java_   class("   edu.isi.st   ella.  Cons")}), null);
           Stella.define    FunctionObject("ALL-ASSERTED-TYPES", "(DEFUN (ALL-ASSERTED-TYPES (CON S OF NAMED-DESCRIPT  ION)) ((   SELF OBJECT)    ) :DOCUMENTATION \"Return a set of a    ll of the types that are\n            asserted to b    e satisfied by 'self'.\" :PUBLIC? TRU      E)", Native .find_java_method("edu.isi.powerl  o       om.logic.Lo   gic", "allAsse  rtedTypes", new java.lang.Class [] {Native.find_java_class("edu.isi        .stella.Stella_Object")}), null);
      Stella.defineFunctionObject("ALL-TAXONOMIC-TYPES", "(DEFUN (ALL-TAXONOMIC-TYPES (CONS OF NAMED-DESCRIPTION)) ((SELF OB        JECT)) :DOC UMENTATION \"Re     turn a set of all of the types that are\nsatisfied by 'self', using on  ly assertions  and upward\ntaxonomic reasoning.     \   " :PUBLIC?    TRUE)", Native.f  ind_java_method("edu.isi.powerloom.logic.Logic", "allTaxonomicTypes", new java.lan   g.Class                 [] {Native.find_java_class("edu.isi.  stella.Stella_Object")}), n  ull);
        S    tella    .defineFunctionObject("A     LL-TYPES", "(DEFUN (ALL-TYPES (CON  S OF NAME D-DE   SCRIPTI ON)) ((SELF OBJECT)) :DOCUMENTATION \"Return a set    of all of the types that are\nsatisfied by 's    elf'.\" :P     UBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.L ogic", "allTypes", new java.lang.Class [] {Native.find_java_class(      "e       du.isi.stella.Stella_Object")}), null);
      Stella.defineFuncti   onObject("HELP-A    LL-TYPES", "(DEFUN  (HELP-ALL-TYPES (CONS OF NAM          ED-DESCRIPT     ION   ))      ((SELF OBJECT) (DO-SUBTYPES? BOOLEAN)))", Nat ive.find_java_method  ( "edu.isi.powerloom.logic.Logic", "helpAllTypes", new java.lang.Class []    {Native.find_java_class("ed  u.isi.stella.Stella_Object"), java.lang.Boolean.TYPE}), null);
        Stella.  defineFunctionObject("HELP-     ALL-SUBTYPES", "(DEFUN HELP-ALL-SUBTYPES ((SUPER DESCRIPTI  ON) (SELF OBJECT) (TYPES LIST)))", Native.find_java_method("edu.isi.powerloom.logic.Description", "helpAllSubtypes", new java.lang.Class []   {Native.find_java_class(    "edu.isi.powerloom.logi   c.Description"), Nati    ve.find_java_class("edu.isi   .stella.Stella_Object"), Nat  ive.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineFunctionObject("ALL-DIRECT-TYPES", "(DEFUN (ALL-DIRECT-TYPES (CONS     OF LOGIC-OBJE        CT))      ((SELF OBJECT)) :DOCUMENTATION \"Return a set of most specific types th at are\nsatisfied by 'self'.\" :PUBLIC? TRUE)", Native.find_java_   method("edu.   isi.powerloom.l     ogic.Logic", "allDirectTypes", new java.lang.Class           [] {Native.  find_java_cl  ass("edu.i  si.stella.S      tel    la_Object")}), null);
      Stella.defineFunctionObje   ct(   "TEST-TYPE-ON-INSTANCE?", "(DEFUN (TEST-TYPE-ON-INSTANCE? BOOLEAN) ((SELF OBJECT   ) (TYPE SURROGATE)) :DOCUMENTATION \"Return  TRUE if 'self' satisfies 'type'.  \"   :PUBLIC? T      RUE)", Native.find_java_method("ed    u.isi.powerloom.logic.Logic", "testTypeOnInstanceP    ", new java.lang.Cl  ass [] {Native.find_java_class("edu.isi.stella.Stell  a_O     bject"), Native.find_java_cl ass("ed u.isi.stella.Surrogate")}), null);
      St    ella.defineMethodObject("(DEFMETH OD (LEVELLIZ ED-TEST-TYPE-ON-INSTANCE? BOOLEAN)  ((LEVEL SUBSUMPTION   -INFEREN     CE-LEVEL) (SELF OBJECT) (TYPE SURROGATE)))", Native.find_java_method("edu.isi.powerloom.logic.SubsumptionInferenceLevel", "levell   i  zedTestTypeOnInstanceP", new java.lang.Class [] {Native.find_java  _class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Surrogate")})     , ((   java.lang. refle ct.Method)(null)));
      St  ella.defineM    ethodObject("(DEFMETHOD (LEVELLIZED-TEST-TYP    E-ON-INST      ANCE? BOOLEAN) ((LEVEL SHALLOW-INFERENCE-    LEVEL) (SELF      OBJECT) (TYPE SURROGATE)))", Na   tive.find_java_method( "   edu.isi.powerloom.logic.ShallowIn  ferenceLevel", "levellizedTestTypeOnInstanceP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_O    bjec   t"), Native.fin    d_java_class("edu.isi.s             tella.Surrogate")}), ((java.lang.reflect.Method)(null)));
      Ste     lla.defineFunctionObject("ALL-EQUIVALENT-RELATIONS", "(DEFUN (ALL-E  Q     UIVALENT-RELATIONS    (CONS OF NAMED-DESCRIPT     ION)) ((RELATION NAMED-DESCRIPTION) (REFLEXIVE? BOOLEAN)) :DOCUMENTATION \"Retu   rn a list of all relati     ons equivalent to 'relation'.\nI     f 'reflexive?', include 'relat      ion' in the list  .\")", Native.find_java_method("edu.isi.po  werloom.logic.NamedDescription", "allEquivalentRelation s", new java.      lang.Class []     {Native.find_java_ class("edu.isi.powerloom.logic.NamedDes  cription"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("REMOVE-E    QUIVALENT-RELATIONS", "(DEFUN (REMOVE-EQUIVAL E    NT-RELATIONS (LIKE SELF)) ((RELATIONSLIST (CONS OF LOGIC-OBJECT)) (RE     LATION      NAMED-DESCRIPTION)))", Native.find_java_method("edu.isi.powerloom.logic.Logic", "removeEquivalentRelations", new java.l   ang.Class [] {Native.fin   d_java_c  lass("edu.isi.stella.Con s"), Native.find_java_class("edu.isi.powerloom.logic.NamedDescription")   }), null);
      Stella.defineFunctionObject("HELP-MEMOIZE-A     LL-SUPERRELATIONS", "(DEFUN (HELP-MEMOIZE-ALL-SUPERRELATIONS (CONS      OF NAME   D-DESC     R   IPTION)) ((RELATION NAMED-DESCRIPTION  ) (REMOVEEQUIVALENTS? BOOLEAN)))", Native  .find_java_meth   od("edu.isi.powerlo   om.logic.NamedDescription", "helpMemoizeAllSuperrelations", new java.lang.Class []     {Native.find_java_class( "edu.isi.    powerloom.logic.NamedDescription"), java.lang.Boolean.TYPE}), null);
         Stella.defineFunctionObject("ALL-SUPERRELATIONS", "(D        EFUN (ALL-SUPERRELATIONS (CONS OF NAMED-DESCRIPTION)) ((RELATION NAMED-DESCRIPTION) (REMOVEEQUIVALENTS? BOOLEAN)) :DOCUMENTATION \"Return a set    of all rel  ations     that subsume relation.\" :PUBLIC? TRUE)    ", Nat ive.find_java_me  thod("edu.isi   .    powerloom. logic.NamedDescriptio  n", "a    llSuperr el  ations", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NamedDescription"), java.lang.Boole   an.TYPE}), null);
      Stella.defineFunctionObject("HELP-MEMOIZE-ALL-SUBRELATIONS",  "(DEFUN (HELP-MEMOIZE-ALL-SUB RELATIONS (CONS OF NAMED-DESCRIPTION)) ((RELATION NAMED-DESCRIPTI ON) (RE    MOVEEQUIVAL    ENTS? BOOLEAN     )))     ", N  ative.fi nd_java_      method("edu.i      si.po    werloom .logic.  NamedDescription", "helpMemoizeAllSub   relations", new java.lang. Class [] {Native.find_java_cla     s     s("ed   u.isi.powerloom.logi     c.NamedDesc   riptio  n"    ), java.  lang.Boolean. TYPE  }), null);
      Ste lla.defineFunctionObject("ALL-SUBRELATIONS", "(DEFUN (ALL-SUBRELATIONS (CONS    OF NAMED-DES   CRIPTION)) ((RELATION NAMED-DESCRIPTION) (REMOVEEQUIVALENTS? BOOLEAN)) :DOCUMENTATIO  N \"Return     a set of all (n    amed) relations that specia    lize   \nrelati  on.\" :PUBLI    C? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.NamedDescr     iption", "allSubrelations", new java.la ng.Class [] {Nativ e.find_java_class("edu.isi.powerloom.logic.NamedDescription"), java.lang.Boolean.TYPE}), null);
            Stella.defineFunctio nObject("ALL-DIRECT-SUPERRELATIONS", "(DEFUN (ALL-DIRECT-SUP      ERRELATIONS (CONS OF NAMED-DESCRIPTION)) ((RELATION NAMED        -DESCRIPTION) (REMOVEEQUIVALENTS? BOOLEA  N)) :DOCU   MENTATION \"Return a set of relations that immediately subsume\n'relation'.  If 'removeEquivalents?' (recommended), don't include any\nrelations equivale     nt     to 'relation'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.NamedDescription", "allDirectSuperrelations", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.NamedDescription"), java.lang.Boolean.TYPE}) , null);
      Stella.def   ineFunctionObject("ALL-DIRECT-SU    BRELATIONS", "(DEFUN  (ALL-DIRECT-SUBRELATIONS (CONS OF NAMED-DESCRIPTION)) ((RELATION NA   MED- DESCRIPT   ION) (REMOVEEQUIVALENTS? BOO LEAN)) :   DOCUMENTATION \"Return a set of     relations that immediately speciali  ze\n'relation'.  If 'removeEquivalent    s?' (  recommended), don't include any\nrelations equiva       lent to 'rel  ation'.\" :PUBLIC? TRUE)", Nativ  e.find_java_   method("edu.isi.powerloom.logic.NamedDescription", "allDirectS   ubrelations", new    ja   va.lang.Class [] {Native.find_java_cl  ass("edu.isi.powerloom.logic.NamedDescription")   , java.lang.Boolean.T    YPE}), nul  l);
      Ste  lla.defineFunctionObject("TE  ST-SUBRELATION?", "(DEFUN (TEST-SUBRELATION? BOOLEAN) ((SUBRELATION SURROGATE) (S      UPERRELA TION SURROGATE   )) :DOCUMENTATION \  "Return TRUE if 'subrelation'    specializes 'superrelation'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.Logic"      , "testSubrelationP", new java.lang.Class [] {Native   .find_java_class("edu    .isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate")}) , null);
      S  tella.defineFunctionObject("ALL-CLASS-INSTAN    CES", "(DEFUN (ALL-CLASS-INSTANCES CONS)    ((TYPE SURROGAT  E)) :DOCUMENTATION \"Return a set of instances th   at belong to the class      'type'.\" :PUBLIC? TRUE)", N    ative.find_java_met   hod("edu.isi.pow      erloom.logic.Logic", "allClassInstances", new  java.   lang.Class [] {Native.f    ind_j  ava_class("edu.isi.stella.Surroga  te")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LEVELLIZED-ALL-CLASS-INSTANCES CONS) ((LEVEL SUBSUMPTION-INFERENCE-LEVEL) (TYPE SURROGATE)))", Native.find_java_method("edu.isi    .powerloom.logic.SubsumptionInferenceLevel", "levellizedAllClassInstances", new java.lang.Clas         s [] {Native.find_java_class("edu.i   si.st     ella  .Surrogate")}), ((ja    va.lang.reflect.Method)(null)));
      Stella.defineMethodObject("(DEFM    ETHOD (LEVELLIZED-ALL-CLASS-I  NSTANCES CONS) ((LEVEL ASSERTION-INFERENCE-LEVEL) (TYPE   SURROGATE)))", Native.find_java_met  hod("edu.isi.powerloom.logic.Ass      ertionInferenceLevel", "levellizedAllClassInstances", ne    w java.lang.Class [] {Native.fin  d_java_class("edu.isi.stella.Su      rrogate")}), ((java.lang.reflect.Method)(null)));
      Stella.defin  eFunctionObject("ALL-RELATION-VAL              UES", "(DEFUN (ALL-   RELATION-VALUES CONS)      ((RELATI    ON S   URROGATE) (NMINUSONEARGUMENTS CONS)) :DOCUMENTATION    \"Return a set of values that satisfy the relati    on\n're    lation' (a surroga    te) applie      d to 'nMinusOneArguments' plus that last value.\")", Native.find_java_method("edu.is    i.powerloom.logic.Logic", "allRelationValues", new java.lang.Class [] {Native.find_java_class("ed       u.isi  .stella.Sur   rogate"), Na tive.find_jav   a_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LEVELLIZED-   ALL-RELATION-VALUES CONS) ((LEVEL SUBSUMPTION-INFERENCE-LEVEL) (RE      LATION SURROGATE) (NMINUSONEARGUMENTS CONS)))", Native.find_java_method("edu.isi.powe  rloom.logic.SubsumptionInferenceL      evel", "levellizedA  llRelationValues", n   ew java.lang.Cl   ass [] {Native.  find_java_class("e    du.i   si.stella.Surrogate"), Nat     ive.find_java_c las   s("edu.isi.stella.Cons")}), ((  java.lang.      reflect.Method)(null)));
      Ste   lla.defineFunctionObject("TEST-RELATION-ON-AR       GUMENTS?", "(DEFUN (TEST-RELATION-ON-ARGUMEN   TS? BOOLEAN) ((RELATION S       URR   OGATE) (ARGUMENTS CONS     )) :DOCUMENT  ATION \"Re  tur   n TRUE if 'relation' (a s    urrogate) is TRUE when\napplied to   'arguments'.\")", Na    tive.find_java_method( "edu.isi.powerloom.logic.Logic", "testRelationOnArgumen   tsP", new jav    a  .lang.Class [] {Native.find_java_class("edu.is    i.stella.Surrogate"), Native.find_java_class("edu.i   si.stella.Cons")}), null);
      Stella.defineMethod   Object("(DEFMETHOD (LEVELLIZED-TEST-RELAT   ION-ON-ARGUMENTS? BOOLE  AN) ((LEVEL SUBSUMPTION-INFERENCE-LEVEL) (RELATION SURROGATE) (ARGUMENTS   CONS))   )", Native.find_java_me       thod("edu.isi.p  owerloom.logic.Subsumpti     onInferenceLevel", "levellizedTestRela    tionOnArguments   P", new   java.lang.Class [] {Native.fin  d   _java_class("ed  u.isi.stella.S   urrogate"), Native.f   ind_java_class("edu.isi.stella.Cons")}), ((java.lang  .refle     ct.Method)(null)));
      Stella.defineFunctionObject("ALL-SLOT-VALUE   S", "(DEFUN (ALL-SLOT-  VALUES CONS) ((SELF LOGIC-OBJECT) (RELATION SURROG       ATE)) :DOCUMEN  TATION \"Return a set of values for the s lot 'relation   ' (a surrogate)\napplied to 'self' (an object).\" :PUBLIC? TRUE)    ", Native.f    ind_java_method("edu.isi.powerloom.logic.LogicObject", "allSlotValues", new java.lang.Class [] {Native.find_java_class("e   du.isi.powerloom.logic.LogicObject"), Native.find_java_class("edu.isi.stella.Surrogate")}), null);         
      Stella.defineFunctionObjec t("GET-SLOT-VALUE", "(DEFUN (G      ET-SLOT-VALUE OBJECT) ((SELF LOGIC-OBJECT) (RELATION SURROGA     TE)) :DOCUMENTATION \"Return a single   value for the slot 'relation' (a surrogate)\napp   lied t    o 's  elf' (an object).\" :PUBLIC? TRUE)", Native.find_ja    va_method("edu.isi.powe    rloom.lo  gic.LogicObject", "getSlotVal    u   e", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.LogicObject"),  Native.find_java_class("ed  u.isi.stella.Surrogate    ")}    ), null);
      Stella.defineFunctionObject("TEST-SLOT-VALUE?", "(DEFUN (TEST-SLOT-VALUE?   BOOLEAN) ((SELF LOGIC-OBJECT) (REL   ATION SU   RROGATE) (FILLER OBJECT)) :DOCUMENTAT     ION \"Return TRUE if the propos    ition '(<relation> <self> <filler>)'\n is true.\" :PUBLIC? T   RUE)", Native.find_java_method("edu.isi.powerloom.lo  g    ic.LogicObject", "testSlotValueP", new java.lang   .   Class [] {Native.  find_java_class("edu.i     si.powerloom.logic.LogicObject"),     Native.find_java_class("edu.isi.stella.Sur   rogate"), Native.find_java_class("edu.isi.stella.Stel    la_Object")}), null);
      Stella .defineFunctionObject("GET-SLOT-MINIMUM-CARD  I NALITY", "(DEFUN (GET-SLOT-MINIMUM-CARDINALITY INTEGER) ((SELF LOGIC  -OBJE   CT) (RELATION SURROGATE)) :DOCUMENTATION \"Return a minimum value for    the number of fi  llers of relation\n'relation' (a surrogate) applied to the instance '   self' (an object).   \" :PUBLIC? TRUE)", Native.find_java_method("edu.   isi.powerloom.logic.LogicObject", "ge  tSlotMinimumC    ardinality", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.LogicObject")    , Native.find_java_class  ("e du.isi.stella.Surrogate")}), nu ll);
      Stella.defineMethodObj    ect("(DEF METHOD (LEVELLIZED-GET-SLOT-MINIMUM-CARD INALIT    Y INTEG  ER) ((LEVE       L SHA      LLOW-INFERENCE-LEVEL) (SELF LOGIC- OBJECT) (RELATION SURROG ATE)))", Native.fi      n    d_java_method("edu.isi.powerloom.logic.Sh  allowInferenceLevel", "levellizedGetSl     otMinimumCardinality", new java.lang.Class [] {Native.find  _   java_class("edu.isi.powerloom.logic.LogicObject"), N      ative.find_java    _   class("edu.isi.stella.Surrogate")}), ((java.lang.reflect.Method)(null)));
          Stella.defineMethodObject("(DEFMETHOD (LEVELLIZED-GET-S LOT-MINIMUM-CARDINALITY INTEGER       ) ((LEVEL SUBSUMPTION-INFERENCE-LEVEL) (SELF LOGIC-OBJECT) (RELATION SURROGATE)))", Native.find_java  _method("edu.isi.powerloom.logic.SubsumptionInferenceLevel",    "levellizedGetSlotMini   mumCardinality", new jav  a.la ng.Class [] {Native.f      ind_java_cl ass("edu.isi.powerloom.logic.LogicObject"), Native.find_java_cl         ass("edu.isi.stella.Surrogate")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("TEST-CLOSED-SLOT?", "(DEFUN (TEST-     CLOSED-SLOT? BOO    LEAN) ((RELATION SURROGATE)) :DOCUMENTATION \"Return TRUE if 're lation' (a surro    g   at  e) is   asserted to \nbe clo  sed or if    the current module closes all relations.\" :PUBLIC? TR  UE)",     Native.find_java_method("edu.isi.p  owerloom.logic.Logic",   "testClosedSlotP", new java.  lang    .Clas     s [] {Na   tive.find_java_class("edu.isi.stella.Surrogate")}), null);
      Ste   lla.    defineF  unctionObject("TES T-FUNCTION-SLOT?", "(    DEFUN (T        EST-FUNCTION-SLOT? BOOLEAN) ((RELATION SURROGATE)) :DOCUMENTATI ON            \"Return TRUE if 'relation' (a surrogate) is a function.\" :PUBLI C? TRUE)",     Native.   find_java_method("edu.isi.powerloom.logic.Logic   ", "testFunctionSlotP", new java.lang.Class [] {Native.find_j  ava_class("ed      u.isi .stella.Surrogate")}), null);
      St     ella.defineFunctionObject("GET  -SLOT-MAXIMUM-CARDINALITY", "( DEFUN (GET-SLOT-MA XIMUM-CARDI NALITY INTEGER) ((SELF LO   GIC-OB JECT) (RELATION S     URROGATE)) :DOCUMENTATION \"Return a maximum v   alue for the number of fillers of relation   \n'relation' (a surrogate) applied to the in  stance 'self' (    an o bject).\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerloom.logic.LogicObject", "getSlotMaximumCardinality",     new java.lang.Cla ss [] {Native.find_java_class    ("edu.isi.powerlo om.logic.LogicObject"),   Native.find_java_class("edu.isi.stella.Surrog  ate")}), null);
      Stella.d    ef   ineMethod   O   bject("(DEFMETHOD (LEVELLIZED-GET-SLOT-MAXIMUM-CARDINALITY INTEGER) ((L    EVEL SHALLOW-INFERENCE-LEVE   L) (  SELF LOGIC-OBJ ECT) (RELATION SURROGATE)))",  Native. find_java_met     hod("edu.isi.p      owerloom.logic.ShallowInferenceLevel", "levellizedGetSlotMaxim  umCardinality", ne  w java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.LogicObject"), Native.find_java_class("edu.isi.stella.Sur    rogate")}), ((java.lang.r    eflect.M ethod)(null)));
        Stell    a.defineMethodObject("(DEFMETHOD (LEVELLI  ZED-GET-SLOT-MAXIMUM-CARDINALITY   INTEGER) ((LEVEL SUBSUMPT    ION-INFE RENCE-LEVEL) (SELF LOGIC-OBJ  ECT) (RELATION SURROGATE)))", Native    .fi    nd_java_method("edu.isi.powerloom.logic.Subsum       ptionInferenceLevel", "levellizedGetSlotMaximumCardinality", new java.lang.Class [] {Native.find_java_c     l  ass("edu.isi.powerloom.logic.Log    icObject"), Native.find_java_class("edu.isi.stella.  Surrogate")}), ((j ava.lang.refle        ct.Met    hod)(null)));
      Stella.def   ineFunctionObject("G  ET-SLOT-VALUE-TYPE", "(DEFUN (GET-SLOT-VALUE-TYPE NAMED-DESCRIPTION) ((SELF LOGIC-OBJECT) (RELATION SU   RROGATE)) :DOCUMENTATION \"Return a mo       st specific type for fillers of th     e slot 're  lation'\n(a surrogate) applied to      'self'. If there    is more than one, pick one.\" :PUBLIC? TRUE)", Native.find_java_meth    od("edu.isi.powerloom.logic.LogicObject", "getSlotValue     Type", new java.lang.Class [] {Native.find_java_class("edu.isi.powerloom.logic.LogicObject"), Native.find_java_class ("edu.isi.st ella.Surrogate")}), nu   ll);
         S   tella.defineFunctionObject("ALL-SLOT-VALUE-TYPES", "(DEFUN (ALL-SLOT-VALUE-TYPES (CON S OF NAMED-DESCRIPTION)) ((SELF L OGIC-OBJECT) (RELATION SURR     OGATE)) :DOCUMENTATION \"Return a set of the most spec  ific types for fi   lle     rs\nof the slot    'relation' ap   plied to 'self'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi        .powerloom.logic.LogicObject", "allS  lotValueTypes",  new java.lang. Class [] {Native.find_java_class("edu.isi.powerloom.logic.LogicObject"), Native.fin  d_java_class("edu.isi .stella.Surrog     ate")}), null);
        Stella.defineMethodObject("(DEFMET HOD (LEVELLIZED-ALL-   SLOT-VA     LUE-TYPES (CONS OF NAMED-DESC     RIPTION)) ((LEVEL      SHALLOW-INFERENCE-       LEVEL      ) (SELF LO   GIC-OBJECT) (RELATION SURROGATE)))", Native.find_java_method("edu.isi.powerloom.logic.Shallow  InferenceLevel",       "levellizedAllS  lotValueTypes", new java.lang.C    lass [] {Native.find_java_class("edu.       isi.powerloom.logic.LogicObject"), Native.find_java_class("edu.isi.stella.Su rrogate")}), ((java.lang.refle ct.Method)(null )));
      Stella.defi   neMethodObject("(DEFMETHOD (LEVELLIZED-ALL-SLOT-VALUE-TYPE                    S (CONS OF NAMED-DESCRIP  TION)) ((LE VEL SUBSUMPTION-IN FERENCE-LEVEL) (SELF LO GIC-    OBJECT) (RELATION SURROGATE)))", Native.find_java_method("edu.isi. pow erloom.logic.Subsumpti   onInferenceLevel", "levellizedAllSlotValueT ypes", new java.lang.Class [] {Native.f ind_java_class("edu.isi.powerloom.l ogic     .LogicObject")    , N    ative.find_java_clas    s("edu.isi.stella.S          urrogate")}), ((ja      va.lang.reflect.Method)(null)));
            Stella.defineMethod      Object ("(DEFMETHOD (LEVELLIZED-TEST-T    YPE-ON-INS  TANCE?   BOOLEAN)       ((LE      VEL NORMAL-I     NFERENCE-LEVEL) (SELF OBJECT) (TYPE SURROGATE)))", Native.find_   java_   method("edu.isi.powerloom.logic.NormalInferenceLevel", "levellizedTestTypeOnInstanceP", new java.lang.Class [] {Native.fin d_java_class("e du.isi.stella.Stella_Object   "), Native.find_java_class("edu.isi.stella.Surrogate")}), ((java.lang.reflect.Meth   od)(null)));
      Stella.defineMet    hodObject("(DEFMETHOD       (LEVELLIZED-ALL-CLASS-INSTANCES CONS) ((LEVEL NO RMAL  -  INFERENCE  -LE VEL) (T   YPE SURROGATE)))", Native.find_    java_method   ("edu.isi.powerlo   om.logic.NormalInfe      ren    ceLevel", "levellizedAllClas sInstances", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate")}), ((java.lang.re flect.Method)(null)));
      Stella.defineMethodObject("(DEFMETHOD (LEVELLIZED-ALL-RELATION-VALUES          CONS)   ((LEVEL NORMAL-INFE      RENCE-LEVEL) (RELATION SU      RROG  ATE)     (NMINUSONE     ARGUMENTS CON     S)))", Native.find_java_method("edu.is  i.powerloom.logic.NormalInferenceLevel", "levellize  dAll   RelationValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_    j  ava_class("edu    .i        si.stella.Cons")}), ((jav    a.lang.reflect.Method)(null)));
             Stella.defineMethodObject("(DEF   METHOD (LEVEL   LIZED-TEST-RELATION-ON -ARGUMENTS? BOOLEAN) ((LEVEL NORMAL-INFERENCE-LEVEL)  (R   ELATIO    N SURROGATE      )   (AR   GUMENTS CONS)))", Native.find_j    ava_method("edu  .isi.powerloom.logic.No     rmalInfer  enc    eLevel", "levellizedTestRelationOnArgumentsP", new java.lang.Class [] {Native.fin  d_jav  a_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Cons  ")}), ((java.lang.ref lect. Method)(null)    ));
       }
  }

   p   ublic static vo     id st a      rtupFrameSupport(  )    {
    { Object old$Module$000 = Stella.$MODULE$.get();
           Object old$Context$000 = Stella.$CONTE     X     T$.get();

       try {
          Native.setSpecial(  Stel        la.$MODULE$, Stella.ge   tStellaModule("/LOGIC", Stella.$STARTUP_TIME_PHASE$ >       1));
          Na  tive.setS    pecial(Stella.$CONTEXT$, ((Mod  ule)(Stella.$MODULE$.get())));   
        if (Stella.     currentStart   upTimePhaseP(2)) {
          _StartupFrameSupport.h   elpStartupFrameSupport1();
        }
        if (    Stella.    currentStartup   TimePhaseP(6)) {
          Stella.finalizeClasses();
        }
           if (Stella.currentStartupT imePhaseP(7)) {
               _Star  tupFrameSupport.helpStartupFrameSupport2();
          Stella.defineMethodObject(  "(DEFMETHOD (LEVELLIZED-GET-SLOT-MINIMUM-CARDINALITY INTEGER)      ((L EVEL NORMAL-INFERENCE-LEVEL) (SELF  LOGIC-OBJECT) (RELATION SURROGATE))     )", Native.find_java_method("edu.isi.powerloom.l    ogic.NormalInferen  ceLevel",    "levellizedGetSlotMinimumCardinality", new java.lang.Class [ ] {Native.find_java_class("edu.isi.powerloom. logic.LogicObjec       t"), Native    .find_jav     a_class("edu.isi.stella.Surrogate")}), ((java.lang.reflect.Method)(null))     );
               Stel     la.defineMethodObject("(DEFMETHOD (LEVELLIZED-GET-SLOT-MAXIMUM   -CARD  INALITY I   NTEGER) ((LEVEL NORMAL-INFERENCE-L EV    EL) (SELF LOGIC-OBJE      CT)      (RELATION SURROGATE)))", Native.find_  java_method("edu.isi.powerloom.logi  c.NormalInferenceLevel", "levellized GetS lotMaximumCardinality    ", new java.lang.Class [] {Native.find_java_class("edu.isi.powe  rloom.logic.LogicObject"), Native.find  _java_class("edu.  isi.stella.Surrogate")}), ((j     ava.lang.reflect.Method)(null)));
          Stella.defineMetho  dObject("(DEFMETHOD (LEVELLIZED-ALL-SLOT-VALUE-TYPES (CONS OF NAMED-DESCRIPTION)) ((LEVE   L NORMAL-INFERENCE-LEVEL) (SELF LOGIC   -OBJECT) (RELATION SURROGATE)))", Native.find_java_method("edu.isi.powerloom.logic.NormalInferenceLevel", "levellizedAllSlotValueTypes", new java.lang.Class [] {N    ative.find_java_class("edu.isi.powerloom.logic.LogicObject"), Native.find_java_class("edu.isi.stella.Surrogate")}), ((java.lang.reflect.Method)(null)));
          Stella.def    ineFunctionObject("STARTUP-FRAME-SUPPORT", "(DEFUN STARTUP-FRAME-SUPPORT () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.powerl   oom.logic._StartupFrameSupport", "startupFrameS  upport", new java.lang.Class [] {}), null);
          { MethodSlot function = Symbol.lookupFunction (L ogi c.SYM_LOGIC_STARTUP_FRAME     _SUPPORT);

            KeyValueList.setDynamicSlot   Value(functi  on.dynamicSl     ots, Logic.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupFrameSupp   ort"), Stella.NULL_STRING_WRAPPER);
           }
          }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        i  f (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object   .copyConsTree(StringWrapper.wrapString("LOGIC")))));
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *LEVELLIZED-BACKCHAINING-ENABLED?* BOOLEAN FALSE :DOCUMENTATION \"KLUDGE: until we know how to handle recursive subgoals\nacross recursive query invocations, this allows us to disable chaining.\")");
             }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
