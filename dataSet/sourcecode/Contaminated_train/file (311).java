/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.mybillr.db.dao;

import com.mybillr.db.dto.*;
import com.mybillr.db.exceptions.*;

public interface AccountActivationDao
{
	/** 
	 * Inserts a new row in the account_activation table.
	 */
	public AccountActivationPk insert(AccountActivation dto) throws AccountActivationDaoException;

	/** 
	 * Updates a single row in the account_activation table.
	 */
	public void update(AccountActivationPk pk, AccountActivation dto) throws AccountActivationDaoException;

	/** 
	 * Deletes a single row in the account_activation table.
	 */
	public void delete(AccountActivationPk pk) throws AccountActivationDaoException;

	/** 
	 * Returns the rows from the account_activation table that matches the specified primary-key value.
	 */
	public AccountActivation findByPrimaryKey(AccountActivationPk pk) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria 'id = :id AND user_id = :userId'.
	 */
	public AccountActivation findByPrimaryKey(int id, int userId) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria ''.
	 */
	public AccountActivation[] findAll() throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria 'user_id = :userId'.
	 */
	public AccountActivation[] findByUser(int userId) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria 'id = :id'.
	 */
	public AccountActivation[] findWhereIdEquals(int id) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria 'user_id = :userId'.
	 */
	public AccountActivation[] findWhereUserIdEquals(int userId) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the criteria 'activation_hash = :activationHash'.
	 */
	public AccountActivation[] findWhereActivationHashEquals(String activationHash) throws AccountActivationDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the account_activation table that match the specified arbitrary SQL statement
	 */
	public AccountActivation[] findByDynamicSelect(String sql, Object[] sqlParams) throws AccountActivationDaoException;

	/** 
	 * Returns all rows from the account_activation table that match the specified arbitrary SQL statement
	 */
	public AccountActivation[] findByDynamicWhere(String sql, Object[] sqlParams) throws AccountActivationDaoException;

}
